using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Threading;
using NETPath.Generators.Interfaces;
using NETPath.Projects;
using NETPath.Projects.Helpers;
using NETPath.Projects.Wcf;

namespace NETPath.Generators.CS.Wcf
{
	public class Generator : IGenerator
	{
		public Action<string> NewOutput { get; private set; }
		public Action<CompileMessage> NewMessage { get; private set; }
		public ObservableCollection<CompileMessage> Messages { get; private set; }
		public CompileMessageSeverity HighestSeverity { get; private set; }
		public string Name { get; private set; }
		public GenerationLanguage Language { get; private set; }
		public GenerationModule Module { get; private set; }
		public bool IsInitialized { get; private set; }

		private WcfProject Data;
		private string ProjectPath;

		public Generator()
		{
			Messages = new ObservableCollection<CompileMessage>();
			Name = "NETPath .NET CSharp Generator";
			Language = GenerationLanguage.CSharp;
			Module = GenerationModule.WindowsRuntime;
		}

		public void Initialize(Project Data, string ProjectPath, Action<string> OutputHandler, Action<CompileMessage> CompileMessageHandler)
		{
			this.Data = Data as WcfProject;
			if (this.Data == null) throw new Exception("Project is null!");
			this.ProjectPath = ProjectPath;
			NewOutput = OutputHandler;
			NewMessage = CompileMessageHandler;
			IsInitialized = true;
		}

		public void Build(bool ClientOnly = false)
		{
			HighestSeverity = CompileMessageSeverity.INFO;
			Messages.Clear();
			NewOutput(Globals.ApplicationTitle);
			NewOutput(string.Format("Version: {0}", Globals.ApplicationVersion));
			NewOutput("Copyright © 2012-2015 Dr. Honda Inc.");

			Verify();

			//If the verification produced errors exit with an error code, we cannot proceed.
			if (HighestSeverity == CompileMessageSeverity.ERROR)
				return;

			Console.WriteLine("Project Path: {0}", ProjectPath);
			string projdir = System.IO.Path.GetDirectoryName(ProjectPath);
			Console.WriteLine("Project Directory: {0}", projdir);

			foreach (ProjectGenerationTarget t in Data.ServerGenerationTargets.Where(a => a.IsEnabled))
			{
				Console.WriteLine("Output Relative Path: {0}", t.Path);
				string op = System.IO.Path.Combine(projdir, t.Path.Replace("/", "\\"));
				Console.WriteLine("Output Absolute Path: {0}", op);
				NewOutput(string.Format("Writing Server Output: {0}", op));
				System.IO.File.WriteAllText(op, Generate(t, true));
			}

			foreach (ProjectGenerationTarget t in Data.ClientGenerationTargets.Where(a => a.IsEnabled))
			{
				Console.WriteLine("Output Relative Path: {0}", t.Path);
				string op = System.IO.Path.Combine(projdir, t.Path.Replace("/", "\\"));
				Console.WriteLine("Output Absolute Path: {0}", op);
				op = Uri.UnescapeDataString(op);
				NewOutput(string.Format("Writing Client Output: {0}", op));
				System.IO.File.WriteAllText(op, Generate(t, false));
			}
		}

		public Task BuildAsync(bool ClientOnly = false)
		{
			return System.Windows.Application.Current == null ? null : Task.Run(() => System.Windows.Application.Current.Dispatcher.Invoke(() => Build(ClientOnly), DispatcherPriority.Normal));
		}

		public void Verify()
		{
			NamespaceGenerator.VerifyCode(Data.Namespace, AddMessage);
			RebuildDREServiceList();
		}

		public Task VerifyAsync()
		{
			return System.Windows.Application.Current == null ? null : Task.Run(() => System.Windows.Application.Current.Dispatcher.Invoke(Verify, DispatcherPriority.Normal));
		}

		private string Generate(ProjectGenerationTarget Target, bool Server)
		{
			var code = new StringBuilder(1048576);
			code.AppendLine("//---------------------------------------------------------------------------");
			code.AppendLine("// This code was generated by a tool. Changes to this file may cause ");
			code.AppendLine("// incorrect behavior and will be lost if the code is regenerated.");
			code.AppendLine("//");
			code.AppendLine(string.Format("// NETPath Version:\t{0}", Globals.ApplicationVersion));
			if (Target.Framework == ProjectGenerationFramework.NET45) code.AppendLine("// .NET Framework Version:\t4.5");
			if (Target.Framework == ProjectGenerationFramework.WINRT) code.AppendLine("// Windows Runtime Version:\t8.0");
			code.AppendLine("//---------------------------------------------------------------------------");
			code.AppendLine();

			if (!Data.UsingInsideNamespace)
			{
				if (Data.GenerateRegions)
				{
					code.AppendLine("#region Using");
					code.AppendLine();
				}
				// Generate using namespaces
				foreach (ProjectUsingNamespace pun in Data.UsingNamespaces)
				{
					if ((pun.Server && Server) || (pun.Client && !Server && ((pun.RT && Target.Framework == ProjectGenerationFramework.WINRT) || (pun.NET && Target.Framework == ProjectGenerationFramework.NET45))))
						code.AppendLine(string.Format("using {0};", pun.Namespace));
				}
				if (Data.EnableEntityFramework && Server) code.AppendLine("using System.Data.Entity.Core.Objects;");
				code.AppendLine();
				if (Data.GenerateRegions)
				{
					code.AppendLine("#endregion");
					code.AppendLine();
				}
			}

			//Generate ContractNamespace Attributes
			if (!Server) code.AppendLine(NamespaceGenerator.GenerateContractNamespaceAttributes(Data.Namespace, Target));

			//Disable XML documentation warnings
			code.AppendLine(string.Format("#pragma warning disable 0649{0}", !Data.EnableDocumentationWarnings ? ", 1591" : ""));

			//Generate project
			if (Server)
			{
				if (Target.Framework == ProjectGenerationFramework.NET45 || Target.Framework == ProjectGenerationFramework.WINRT)
					code.AppendLine(NamespaceGenerator.GenerateServerCode45(Data.Namespace, Target));
			}
			else
			{
				if (Target.Framework == ProjectGenerationFramework.NET45) code.AppendLine(NamespaceGenerator.GenerateClientCode45(Data.Namespace, Target));
				if (Target.Framework == ProjectGenerationFramework.WINRT) code.AppendLine(NamespaceGenerator.GenerateClientCodeRT8(Data.Namespace, Target));
			}

			//Reenable XML documentation warnings
			code.AppendLine(string.Format("#pragma warning restore 0649{0}", !Data.EnableDocumentationWarnings ? ", 1591" : ""));

			return code.ToString();
		}

		private void AddMessage(CompileMessage Message)
		{
			Messages.Add(Message);
			if (Message.Severity == CompileMessageSeverity.ERROR && HighestSeverity != CompileMessageSeverity.ERROR) HighestSeverity = CompileMessageSeverity.ERROR;
			if (Message.Severity == CompileMessageSeverity.WARN && HighestSeverity == CompileMessageSeverity.INFO) HighestSeverity = CompileMessageSeverity.WARN;
			NewOutput(string.Format("{0} {1}: {2} Object: {3} Owner: {4}", Message.Severity, Message.Code, Message.Description, Message.ErrorObject, Message.Owner));
			NewMessage(Message);
		}

		internal void RebuildDREServiceList()
		{
			//Get all services with DRE in the solution.
			var sl = new List<WcfService>();
			sl.AddRange(DataRevisionServiceScan(Data.Namespace));

			//Clean all DataRevisionServiceNames lists
			ResetDRSNames(Data.Namespace);

			//Rebuild DRE service name lists
			foreach (var sv in sl)
				foreach (var dre in sv.ServiceOperations.OfType<WcfDataChangeMethod>())
				{
					var t = DataReivsionReferenceRetrieve(sv.Parent.Owner as WcfProject, (sv.Parent.Owner as WcfProject)?.Namespace, dre.ReturnType.ID);
					if (t == null) continue;
					if (dre.IsHidden) continue;
					t.DataRevisionServiceNames.Add(new DataRevisionName(string.Format("{0}.{1}", sv.Parent, sv.Name), true, dre.UseServerAwaitPattern, dre.UseClientAwaitPattern));
					t.DataRevisionServiceNames.Add(new DataRevisionName(string.Format("{0}.{1}", sv.Parent, sv.HasClientType ? sv.ClientType.Name : sv.Name), false, dre.UseServerAwaitPattern, dre.UseClientAwaitPattern));
				}
		}

		internal static List<WcfService> DataRevisionServiceScan(WcfNamespace Namespace)
		{
			List<WcfService> sl = Namespace.Services.Where(sv => sv.HasDCMOperations).ToList();

			foreach (var n in Namespace.Children)
				sl.AddRange(DataRevisionServiceScan(n));

			return sl;
		}

		internal static void ResetDRSNames(WcfNamespace Namespace)
		{
			foreach (var drs in Namespace.Data)
				drs.DataRevisionServiceNames = new List<DataRevisionName>();

			foreach (var n in Namespace.Children)
				ResetDRSNames(n);
		}

		internal static WcfData DataReivsionReferenceRetrieve(WcfProject Project, WcfNamespace Namespace, Guid TypeID)
		{
			var d = Namespace.Data.FirstOrDefault(a => a.ID == TypeID);
			if (d != null) return d;

			return Namespace.Children.Select(n => DataReivsionReferenceRetrieve(Project, n, TypeID)).FirstOrDefault(t => t != null);
		}

	}
}