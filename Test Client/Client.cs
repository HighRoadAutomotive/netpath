//---------------------------------------------------------------------------
// This code was generated by a tool. Changes to this file may cause 
// incorrect behavior and will be lost if the code is regenerated.
//
// WCF Architect Version:	2.0.2000.0
// .NET Framework Version:	4.5
//---------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Net;
using System.Net.Security;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Description;
using System.Text;
using System.Windows;

[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://prospectivesoftware.org/WCFArchitect/Projects/", ClrNamespace="WCFArchitect.Projects")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://prospectivesoftware.org/WCFArchitect/Projects/TestNS/", ClrNamespace="WCFArchitect.Projects.TestNS")]


#pragma warning disable 1591
namespace WCFArchitect.Projects
{
	/**************************************************************************
	*	Data Contracts
	**************************************************************************/

	[KnownType(typeof(Guid[]))]
	[System.Diagnostics.DebuggerStepThroughAttribute]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("WCF Architect Service Compiler", "2.0.2000.0")]
	[DataContract(Name = "TestData1", Namespace = "http://prospectivesoftware.org/WCFArchitect/Projects/")]
	public partial class TestData1 : System.Runtime.Serialization.IExtensibleDataObject
	{
		public System.Runtime.Serialization.ExtensionDataObject ExtensionData { get; set; }

		private Guid IDField;
		[DataMember(Name = "ID")] public Guid ID { get { return IDField; } set { IDField = value; } }
	}

	//XAML Integration Object for the TestData1 DTO
	[System.CodeDom.Compiler.GeneratedCodeAttribute("WCF Architect Service Compiler", "2.0.2000.0")]
	public partial class TestData1XAML : System.Windows.DependencyObject
	{
		//Properties
		public Guid ID { get { return (Guid)GetValue(IDProperty); } set { SetValue(IDProperty, value); } }
		public static readonly DependencyProperty IDProperty = DependencyProperty.Register("ID", typeof(Guid), typeof(WCFArchitect.Projects.TestData1));

		//Implicit Conversion
		public static implicit operator WCFArchitect.Projects.TestData1(WCFArchitect.Projects.TestData1XAML Data)
		{
			if (Data == null) return null;
			if (Application.Current.Dispatcher.CheckAccess())
				return TestData1XAML.ConvertFromXAMLObject(Data);
			else
				return (WCFArchitect.Projects.TestData1)Application.Current.Dispatcher.Invoke(new Func<WCFArchitect.Projects.TestData1>(() => WCFArchitect.Projects.TestData1XAML.ConvertFromXAMLObject(Data)), System.Windows.Threading.DispatcherPriority.Normal);
		}
		public static implicit operator WCFArchitect.Projects.TestData1XAML(WCFArchitect.Projects.TestData1 Data)
		{
			if (Data == null) return null;
			if (Application.Current.Dispatcher.CheckAccess())
				return TestData1XAML.ConvertToXAMLObject(Data);
			else
				return (WCFArchitect.Projects.TestData1XAML)Application.Current.Dispatcher.Invoke(new Func<TestData1>(() => WCFArchitect.Projects.TestData1XAML.ConvertToXAMLObject(Data)), System.Windows.Threading.DispatcherPriority.Normal);
		}

		//Constructors
		public TestData1XAML(WCFArchitect.Projects.TestData1 Data)
		{
			Type t_DT = Data.GetType();
			FieldInfo fi_ID = t_DT.GetField("IDField", BindingFlags.NonPublic | BindingFlags.Instance);
			if(fi_ID != null)
				ID = (Guid)fi_ID.GetValue(Data);
		}

		public TestData1XAML()
		{
		}

		//XAML/DTO Conversion Functions
		public static TestData1 ConvertFromXAMLObject(WCFArchitect.Projects.TestData1XAML Data)
		{
			WCFArchitect.Projects.TestData1 DTO = new WCFArchitect.Projects.TestData1();
			Type t_XAML = Data.GetType();
			Type t_DTO = DTO.GetType();
			PropertyInfo pi_ID = t_XAML.GetProperty("ID", BindingFlags.Public | BindingFlags.Instance);
			FieldInfo fi_ID = t_DTO.GetField("IDField", BindingFlags.NonPublic | BindingFlags.Instance);
			if(fi_ID != null && pi_ID != null) fi_ID.SetValue(DTO, (Guid)pi_ID.GetValue(Data, null));
			return DTO;
		}

		public static TestData1XAML ConvertToXAMLObject(WCFArchitect.Projects.TestData1 Data)
		{
			WCFArchitect.Projects.TestData1XAML XAML = new WCFArchitect.Projects.TestData1XAML();
			Type t_DTO = Data.GetType();
			Type t_XAML = XAML.GetType();
			PropertyInfo pi_ID = t_XAML.GetProperty("ID", BindingFlags.Public | BindingFlags.Instance);
			FieldInfo fi_ID = t_DTO.GetField("IDField", BindingFlags.NonPublic | BindingFlags.Instance);
			if(fi_ID != null && pi_ID != null)
				pi_ID.SetValue(XAML, (Guid)fi_ID.GetValue(Data), null);
			return XAML;
		}
	}

	[System.Diagnostics.DebuggerStepThroughAttribute]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("WCF Architect Service Compiler", "2.0.2000.0")]
	[DataContract(Name = "TestData2", Namespace = "http://prospectivesoftware.org/WCFArchitect/Projects/")]
	public partial class TestData2 : System.Runtime.Serialization.IExtensibleDataObject
	{
		public System.Runtime.Serialization.ExtensionDataObject ExtensionData { get; set; }

	}



	/**************************************************************************
	*	Service Contracts
	**************************************************************************/

	[System.CodeDom.Compiler.GeneratedCodeAttribute("WCF Architect Service Compiler", "2.0.2000.0")]
	public interface ITestService
	{
		[OperationContract(Action = "http://prospectivesoftware.org/WCFArchitect/Projects/TestService/Getasdads", ReplyAction = "http://prospectivesoftware.org/WCFArchitect/Projects/TestService/SetasdadsResponse")]
		bool Getasdads();
		[OperationContract(Action = "http://prospectivesoftware.org/WCFArchitect/Projects/TestService/Getasdads", ReplyAction = "http://prospectivesoftware.org/WCFArchitect/Projects/TestService/SetasdadsResponse")]
		void Setasdads(bool value);

		[OperationContract(Action = "http://prospectivesoftware.org/WCFArchitect/Projects/TestService/SynchronousTest", ReplyAction = "http://prospectivesoftware.org/WCFArchitect/Projects/TestService/SynchronousTestResponse")]
		void SynchronousTest();

		///<param name='Callback'>The function to call when the operation is complete.</param>
		///<param name='AsyncState'>An object representing the state of the operation.</param>
		[OperationContract(Action = "http://prospectivesoftware.org/WCFArchitect/Projects/TestService/AsynchronousTestInvoke", ReplyAction = "http://prospectivesoftware.org/WCFArchitect/Projects/TestService/AsynchronousTestInvokeResponse")]
		IAsyncResult BeginAsynchronousTestInvoke(AsyncCallback Callback, object AsyncState);
		///<summary>Finalizes the asynchronous operation.</summary>
		///<returns>
		///
		///</returns>
		///<param name='result'>The result of the operation.</param>
		string EndAsynchronousTestInvoke(IAsyncResult result);

		[OperationContract(Action = "http://prospectivesoftware.org/WCFArchitect/Projects/TestService/AwaitableTestAsync", ReplyAction = "http://prospectivesoftware.org/WCFArchitect/Projects/TestService/AwaitableTestAsyncResponse")]
		System.Threading.Tasks.Task<bool> AwaitableTestAsync();

	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("WCF Architect Service Compiler", "2.0.2000.0")]
	public interface ITestServiceCallback
	{
		[OperationContract(Action = "http://prospectivesoftware.org/WCFArchitect/Projects/TestService/SyncTest", ReplyAction = "http://prospectivesoftware.org/WCFArchitect/Projects/TestService/SyncTestResponse")]
		void SyncTest();

		///<param name='Callback'>The function to call when the operation is complete.</param>
		///<param name='AsyncState'>An object representing the state of the operation.</param>
		[OperationContract(Action = "http://prospectivesoftware.org/WCFArchitect/Projects/TestService/AsyncTestInvoke", ReplyAction = "http://prospectivesoftware.org/WCFArchitect/Projects/TestService/AsyncTestInvokeResponse")]
		IAsyncResult BeginAsyncTestInvoke(AsyncCallback Callback, object AsyncState);
		///<summary>Finalizes the asynchronous operation.</summary>
		///<returns>
		///
		///</returns>
		///<param name='result'>The result of the operation.</param>
		bool EndAsyncTestInvoke(IAsyncResult result);

		[OperationContract(Action = "http://prospectivesoftware.org/WCFArchitect/Projects/TestService/AwaitTestAsync", ReplyAction = "http://prospectivesoftware.org/WCFArchitect/Projects/TestService/AwaitTestAsyncResponse")]
		System.Threading.Tasks.Task<string> AwaitTestAsync();

	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("WCF Architect Service Compiler", "2.0.2000.0")]
	public interface ITestServiceChannel : ITestService, System.ServiceModel.IClientChannel
	{
	}

	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("WCF Architect Service Compiler", "2.0.2000.0")]
	public partial class TestServiceProxy : System.ServiceModel.ClientBase<ITestService>, ITestService
	{
		public TestServiceProxy(string endpointConfigurationName) : base(endpointConfigurationName)
		{
			onBeginAsynchronousTestDelegate = new BeginOperationDelegate(this.OnBeginAsynchronousTest);
			onEndAsynchronousTestDelegate = new EndOperationDelegate(this.OnEndAsynchronousTest);
			onAsynchronousTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAsynchronousTestCompleted);
		}

		public TestServiceProxy(string endpointConfigurationName, string remoteAddress) : base(endpointConfigurationName, remoteAddress)
		{
			onBeginAsynchronousTestDelegate = new BeginOperationDelegate(this.OnBeginAsynchronousTest);
			onEndAsynchronousTestDelegate = new EndOperationDelegate(this.OnEndAsynchronousTest);
			onAsynchronousTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAsynchronousTestCompleted);
		}

		public TestServiceProxy(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : base(endpointConfigurationName, remoteAddress)
		{
			onBeginAsynchronousTestDelegate = new BeginOperationDelegate(this.OnBeginAsynchronousTest);
			onEndAsynchronousTestDelegate = new EndOperationDelegate(this.OnEndAsynchronousTest);
			onAsynchronousTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAsynchronousTestCompleted);
		}

		public TestServiceProxy(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : base(binding, remoteAddress)
		{
			onBeginAsynchronousTestDelegate = new BeginOperationDelegate(this.OnBeginAsynchronousTest);
			onEndAsynchronousTestDelegate = new EndOperationDelegate(this.OnEndAsynchronousTest);
			onAsynchronousTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAsynchronousTestCompleted);
		}

		bool ITestService.Getasdads()
		{
			return base.Channel.Getasdads();
		}
		void ITestService.Setasdads(bool value)
		{
			base.Channel.Setasdads(value);
		}
		public bool asdads { get { return ((ITestService)this).Getasdads(); } set { ((ITestService)this).Setasdads(value); } }

		public void SynchronousTest()
		{
			base.Channel.SynchronousTest();
		}

		private readonly BeginOperationDelegate onBeginAsynchronousTestDelegate;
		private readonly EndOperationDelegate onEndAsynchronousTestDelegate;
		private readonly System.Threading.SendOrPostCallback onAsynchronousTestCompletedDelegate;
		public Action<string, System.Exception, bool, object> AsynchronousTestCompleted;
		///<param name='Callback'>The function to call when the operation is complete.</param>
		///<param name='AsyncState'>An object representing the state of the operation.</param>
		IAsyncResult ITestService.BeginAsynchronousTestInvoke(AsyncCallback Callback, object AsyncState)
		{
			return base.Channel.BeginAsynchronousTestInvoke(Callback, AsyncState);
		}
		///<summary>Finalizes the asynchronous operation.</summary>
		///<returns>
		///
		///</returns>
		///<param name='result'>The result of the operation.</param>
		string ITestService.EndAsynchronousTestInvoke(IAsyncResult result)
		{
			return base.Channel.EndAsynchronousTestInvoke(result);
		}
		private IAsyncResult OnBeginAsynchronousTest(object[] Values, AsyncCallback Callback, object AsyncState)
		{
			return ((ITestService)this).BeginAsynchronousTestInvoke(Callback, AsyncState);
		}
		private object[] OnEndAsynchronousTest(IAsyncResult result)
		{
			return new object[] { ((ITestService)this).EndAsynchronousTestInvoke(result) };
		}
		private void OnAsynchronousTestCompleted(object state)
		{
			if (this.AsynchronousTestCompleted == null) return;
			InvokeAsyncCompletedEventArgs e = (InvokeAsyncCompletedEventArgs)state;
			this.AsynchronousTestCompleted((string)e.Results[0], e.Error, e.Cancelled, e.UserState);
		}
		public void AsynchronousTestInvoke()
		{
			this.AsynchronousTestInvoke(null);
		}
		///<param name='userState'>Allows the user of this function to distinguish between different calls.</param>
		public void AsynchronousTestInvoke(object userState)
		{
			InvokeAsync(this.onBeginAsynchronousTestDelegate, new object[] {  }, this.onEndAsynchronousTestDelegate, this.onAsynchronousTestCompletedDelegate, userState);
		}

		public System.Threading.Tasks.Task<bool> AwaitableTestAsync()
		{
			return base.Channel.AwaitableTestAsync();
		}

	}


}
namespace WCFArchitect.Projects.TestNS
{
}


#pragma warning restore 1591
