<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
					xmlns:pc="http://schemas.ellipticbit.com/controls">
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="pack://application:,,,/RestForge.Styles;component/Dark/Defaults.xaml"/>
	</ResourceDictionary.MergedDictionaries>

	<Style x:Key="{x:Type TextBlock}" TargetType="{x:Type TextBlock}" >
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
	</Style>
	
	<Style x:Key="{x:Type Hyperlink}" TargetType="{x:Type Hyperlink}">
		<Setter Property="TextDecorations" Value="None" />
		<Setter Property="Foreground" Value="#FF0097FB" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="#FF77BBFF" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="HyperlinkTextBlock" TargetType="{x:Type TextBlock}" >
		<Setter Property="Foreground" Value="#FF0097FB" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="TextWrapping" Value="Wrap" />
		<Setter Property="TextTrimming" Value="CharacterEllipsis" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="#FF77BBFF" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="{x:Type Label}" TargetType="{x:Type Label}" >
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Padding" Value="5" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" >
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" RecognizesAccessKey="True"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type ToggleButton}" TargetType="{x:Type ToggleButton}" >
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="Background" Value="{StaticResource DefaultBackgroundColor}"/>
		<Setter Property="BorderBrush" Value="{StaticResource DefaultBorderColor}"/>
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="Padding" Value="10,4" />
		<Setter Property="MinHeight" Value="24" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="PART_Border" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="0" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
						<Border x:Name="PART_Overlay" Background="Transparent">
							<ContentPresenter Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="PART_Border" Property="Background" Value="{StaticResource DefaultSelectionColor}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Overlay" Property="Background" Value="{StaticResource MouseOverBackgroundColor}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsPressed" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Overlay" Property="Background" Value="{StaticResource PressedBackgroundColor}" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.75"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBoxBase}">
		<Setter Property="CaretBrush" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="SelectionBrush" Value="{StaticResource DefaultSelectionColor}" />
		<Setter Property="Background" Value="{StaticResource DefaultBackgroundColor}"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="UseLayoutRounding" Value="true"/>
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="MinHeight" Value="24" />
		<Setter Property="AllowDrop" Value="true"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBoxBase}">
					<Border Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" >
						<ScrollViewer Margin="1,2" x:Name="PART_ContentHost" UseLayoutRounding="True" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundColor}"/>
							<Setter Property="Foreground" Value="{StaticResource DisabledFontColor}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource MouseOverBackgroundColor}"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource FocusedBackgroundColor}"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="VerticalScrollBarVisibility" Value="Auto"/>
								<Condition Property="AcceptsReturn" Value="True"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter Property="VerticalContentAlignment" Value="Top" />
							</MultiTrigger.Setters>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="VerticalScrollBarVisibility" Value="Visible"/>
								<Condition Property="AcceptsReturn" Value="True"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter Property="VerticalContentAlignment" Value="Top" />
							</MultiTrigger.Setters>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style x:Key="{x:Type PasswordBox}" TargetType="{x:Type PasswordBox}">
		<Setter Property="PasswordChar" Value="●"/>
		<Setter Property="Background" Value="{StaticResource DefaultBackgroundColor}"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="AllowDrop" Value="True"/>
		<Setter Property="MinHeight" Value="20"/>
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type PasswordBox}">
					<Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundColor}"/>
							<Setter Property="Foreground" Value="{StaticResource DisabledFontColor}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource MouseOverBackgroundColor}"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource FocusedBackgroundColor}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
					<Condition Property="IsSelectionActive" Value="False"/>
				</MultiTrigger.Conditions>
				<Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
			</MultiTrigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
		<Setter Property="Background" Value="{StaticResource DefaultBackgroundColor}" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="UseLayoutRounding" Value="true"/>
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="10,2" />
		<Setter Property="MinHeight" Value="24" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="Border" CornerRadius="0" BorderThickness="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
						<Border x:Name="Overlay" Background="Transparent" Padding="{TemplateBinding Padding}">
							<ContentPresenter Margin="2" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter TargetName="Overlay" Property="Background" Value="{StaticResource ButtonMouseOverColor}" />
						</Trigger>
						<Trigger Property="IsDefaulted" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonDefaultColor}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Overlay" Property="Background" Value="{StaticResource ButtonMouseOverColor}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Overlay" Property="Background" Value="{StaticResource ButtonPressedColor}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundColor}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type GroupBox}" TargetType="{x:Type GroupBox}">
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="{StaticResource DefaultBorderColor}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Margin" Value="2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GroupBox}">
					<Grid UseLayoutRounding="true" >
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
						</Grid.RowDefinitions>
						<Border x:Name="HeaderBorder" Grid.Column="0" Grid.Row="0" Padding="3,1,3,2" HorizontalAlignment="Stretch" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding BorderBrush}" >
							<ContentControl Content="{TemplateBinding Header}" Foreground="{TemplateBinding Foreground}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" FontSize="11pt"/>
						</Border>
						<Border Name="ContentBorder" Grid.Column="0" Grid.Row="1" Margin="0,-1,0,0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
							<ContentPresenter Margin="{TemplateBinding Padding}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}"/>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style x:Key="{x:Type ToolTip}" TargetType="ToolTip">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="HasDropShadow" Value="True"/>
		<Setter Property="FontSize" Value="12pt" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToolTip">
					<Border Name="Border" Background="{StaticResource ToolTipBackground}" BorderBrush="{StaticResource WindowBorderColor}" BorderThickness="1" >
						<ContentPresenter Margin="15,5"  HorizontalAlignment="Left" VerticalAlignment="Top" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="HasDropShadow" Value="true">
							<Setter TargetName="Border" Property="CornerRadius" Value="5"/>
							<Setter TargetName="Border" Property="UseLayoutRounding" Value="true"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<ControlTemplate x:Key="CheckBoxNoContentTemplate" TargetType="{x:Type CheckBox}">
		<StackPanel IsHitTestVisible="True" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
			<Border Name="Checkbox" Grid.Column="0" Width="18" Height="18" BorderThickness="0" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" UseLayoutRounding="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
				<Grid VerticalAlignment="Center" HorizontalAlignment="Center">
					<Path Visibility="Collapsed" Width="12" Height="12" x:Name="CheckMark" UseLayoutRounding="True" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="3" Data="M 0 0 L 12 12 M 0 12 L 12 0" />
					<Path Visibility="Collapsed" Width="12" Height="12" x:Name="InderminateMark" UseLayoutRounding="True" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="3" Data="M 0 12 L 12 0"/>
				</Grid>
			</Border>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CheckStates">
					<VisualState x:Name="Checked">
						<Storyboard>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CheckMark">
								<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Unchecked" />
					<VisualState x:Name="Indeterminate">
						<Storyboard>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="InderminateMark">
								<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
		</StackPanel>
	</ControlTemplate>
	<ControlTemplate x:Key="CheckboxLeftTemplate" TargetType="{x:Type CheckBox}">
		<StackPanel Orientation="Horizontal">
			<Border Name="Checkbox" Width="18" Height="18" BorderThickness="0" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" UseLayoutRounding="True" HorizontalAlignment="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
				<Grid VerticalAlignment="Center" HorizontalAlignment="Center">
					<Path Visibility="Collapsed" Width="12" Height="12" x:Name="CheckMark" UseLayoutRounding="True" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="3" Data="M 0 0 L 12 12 M 0 12 L 12 0" />
					<Path Visibility="Collapsed" Width="12" Height="12" x:Name="InderminateMark" UseLayoutRounding="True" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="3" Data="M 0 12 L 12 0"/>
				</Grid>
			</Border>
			<ContentPresenter Name="Content" FlowDirection="LeftToRight" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CheckStates">
					<VisualState x:Name="Checked">
						<Storyboard>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CheckMark">
								<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Unchecked" />
					<VisualState x:Name="Indeterminate">
						<Storyboard>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="InderminateMark">
								<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
		</StackPanel>
		<ControlTemplate.Triggers>
			<Trigger Property="HasContent" Value="True">
				<Setter Property="Padding" Value="5,2,0,2"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="CheckboxRightTemplate" TargetType="{x:Type CheckBox}">
		<StackPanel Orientation="Horizontal">
			<ContentPresenter Name="Content" FlowDirection="LeftToRight" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
			<Border Name="Checkbox" Width="18" Height="18" BorderThickness="0" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" UseLayoutRounding="True" HorizontalAlignment="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
				<Grid VerticalAlignment="Center" HorizontalAlignment="Center">
					<Path Visibility="Collapsed" Width="12" Height="12" x:Name="CheckMark" UseLayoutRounding="True" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="3" Data="M 0 0 L 12 12 M 0 12 L 12 0" />
					<Path Visibility="Collapsed" Width="12" Height="12" x:Name="InderminateMark" UseLayoutRounding="True" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="3" Data="M 0 12 L 12 0"/>
				</Grid>
			</Border>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CheckStates">
					<VisualState x:Name="Checked">
						<Storyboard>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CheckMark">
								<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Unchecked" />
					<VisualState x:Name="Indeterminate">
						<Storyboard>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="InderminateMark">
								<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
		</StackPanel>
		<ControlTemplate.Triggers>
			<Trigger Property="HasContent" Value="True">
				<Setter Property="Padding" Value="0,2,5,2"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="Background" Value="{StaticResource DefaultBackgroundColor}"/>
		<Setter Property="BorderBrush" Value="{StaticResource ReadOnlyFontColor}"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template" Value="{StaticResource CheckboxLeftTemplate}" />
		<Style.Triggers>
			<Trigger Property="HasContent" Value="False">
				<Setter Property="HorizontalContentAlignment" Value="Center"/>
				<Setter Property="Template" Value="{StaticResource CheckBoxNoContentTemplate}"/>
			</Trigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{StaticResource MouseOverBackgroundColor}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{StaticResource DisabledFontColor}"/>
				<Setter Property="Background" Value="{StaticResource DisabledBackgroundColor}" />
			</Trigger>
			<Trigger Property="FlowDirection" Value="RightToLeft">
				<Setter Property="Template" Value="{StaticResource CheckboxRightTemplate}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<ControlTemplate x:Key="RadioButtonEmptyTemplate" TargetType="{x:Type RadioButton}">
		<StackPanel Orientation="Horizontal">
			<Grid Name="Checkbox" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" UseLayoutRounding="True">
				<Ellipse x:Name="Border" Width="19" Height="19" StrokeThickness="0" Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}" HorizontalAlignment="Center" VerticalAlignment="Center" />
				<Ellipse x:Name="CheckMark" Width="11" Height="11" Visibility="Collapsed" Fill="{TemplateBinding BorderBrush}" HorizontalAlignment="Center" VerticalAlignment="Center" />
			</Grid>
			<ContentPresenter Name="Content" Grid.Column="1" FlowDirection="LeftToRight" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CheckStates">
					<VisualState x:Name="Checked">
						<Storyboard>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CheckMark">
								<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Unchecked" />
					<VisualState x:Name="Indeterminate" />
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
		</StackPanel>
	</ControlTemplate>
	<ControlTemplate x:Key="RadioButtonLeftTemplate" TargetType="{x:Type RadioButton}">
		<StackPanel Orientation="Horizontal">
			<Grid Name="Checkbox" HorizontalAlignment="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" UseLayoutRounding="True">
				<Ellipse x:Name="Border" Width="19" Height="19" StrokeThickness="0" Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}" HorizontalAlignment="Center" VerticalAlignment="Center" />
				<Ellipse x:Name="CheckMark" Width="11" Height="11" Visibility="Collapsed" Fill="{TemplateBinding BorderBrush}" HorizontalAlignment="Center" VerticalAlignment="Center" />
			</Grid>
			<ContentPresenter Name="Content" FlowDirection="LeftToRight" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CheckStates">
					<VisualState x:Name="Checked">
						<Storyboard>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CheckMark">
								<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Unchecked" />
					<VisualState x:Name="Indeterminate" />
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
		</StackPanel>
		<ControlTemplate.Triggers>
			<Trigger Property="HasContent" Value="True">
				<Setter Property="Padding" Value="5,2,0,2"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="RadioButtonRightTemplate" TargetType="{x:Type RadioButton}">
		<StackPanel Orientation="Horizontal">
			<ContentPresenter Name="Content" FlowDirection="LeftToRight" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
			<Grid Name="Checkbox" HorizontalAlignment="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" UseLayoutRounding="True">
				<Ellipse x:Name="Border" Width="19" Height="19" StrokeThickness="0" Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}" HorizontalAlignment="Center" VerticalAlignment="Center" />
				<Ellipse x:Name="CheckMark" Width="11" Height="11" Visibility="Collapsed" Fill="{TemplateBinding BorderBrush}" HorizontalAlignment="Center" VerticalAlignment="Center" />
			</Grid>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CheckStates">
					<VisualState x:Name="Checked">
						<Storyboard>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CheckMark">
								<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Unchecked" />
					<VisualState x:Name="Indeterminate" />
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
		</StackPanel>
		<ControlTemplate.Triggers>
			<Trigger Property="HasContent" Value="True">
				<Setter Property="Padding" Value="0,2,5,2"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="Background" Value="{StaticResource DefaultBackgroundColor}"/>
		<Setter Property="BorderBrush" Value="{StaticResource ReadOnlyFontColor}"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template" Value="{StaticResource RadioButtonLeftTemplate}" />
		<Style.Triggers>
			<Trigger Property="HasContent" Value="False">
				<Setter Property="HorizontalContentAlignment" Value="Center"/>
				<Setter Property="Template" Value="{StaticResource RadioButtonEmptyTemplate}"/>
			</Trigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{StaticResource MouseOverBackgroundColor}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{StaticResource DisabledFontColor}"/>
				<Setter Property="Background" Value="{StaticResource DisabledBackgroundColor}" />
			</Trigger>
			<Trigger Property="FlowDirection" Value="RightToLeft">
				<Setter Property="Template" Value="{StaticResource RadioButtonRightTemplate}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Geometry x:Key="DownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>
	<Geometry x:Key="UpArrowGeometry">M 0 0 L 3.5 -4 L 7 0 Z</Geometry>
	<Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="{StaticResource DefaultBorderColor}"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="PART_Border" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<ContentPresenter Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
							<Border Grid.Column="1" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
								<Path x:Name="Arrow" Data="{StaticResource DownArrowGeometry}" Fill="Black" HorizontalAlignment="Center" Margin="3,1,0,0" VerticalAlignment="Center"/>
							</Border>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Data" TargetName="Arrow" Value="{StaticResource UpArrowGeometry}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Border" Property="Background" Value="{StaticResource MouseOverBackgroundColor}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsPressed" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Border" Property="Background" Value="{StaticResource PressedBackgroundColor}" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ComboBoxItemTemplate" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="Padding" Value="3" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
						<ContentPresenter Content="{TemplateBinding Content}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{StaticResource MouseOverBackgroundColor}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="False" />
								<Condition Property="IsSelected" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{StaticResource DefaultSelectionColor}" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="Background" Value="{StaticResource DefaultBackgroundColor}"/>
		<Setter Property="BorderBrush" Value="{StaticResource DefaultBorderColor}"/>
		<Setter Property="MinHeight" Value="24"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="Padding" Value="4,3"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemTemplate}" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Border Name="BG" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
						<Grid x:Name="MainGrid" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
							</Grid.ColumnDefinitions>
							<Popup PlacementTarget="{Binding ElementName=BG}" x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" IsOpen="{TemplateBinding IsDropDownOpen}" Margin="0" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
								<Border x:Name="DropDownBorder" Width="{TemplateBinding ActualWidth}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}" Padding="2" HorizontalAlignment="Stretch" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
									<ScrollViewer x:Name="DropDownScrollViewer" HorizontalAlignment="Stretch" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" Foreground="{TemplateBinding Foreground}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" >
										<!--<ItemsControl ItemsSource="{TemplateBinding ItemsSource}" x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" ItemContainerStyle="{TemplateBinding ItemContainerStyle}" ItemContainerStyleSelector="{TemplateBinding ItemContainerStyleSelector}" ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}" ItemTemplate="{TemplateBinding ItemTemplate}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />-->
										<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
									</ScrollViewer>
								</Border>
							</Popup>
							<ToggleButton Grid.Column="0" Name="Toggle" Visibility="Hidden" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding IsEnabled}" Style="{StaticResource ComboBoxToggleButton}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}"/>
							<ContentPresenter Grid.Column="0" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="HasItems" Value="false">
							<Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource DisabledFontColor}"/>
							<Setter Property="Background" Value="{StaticResource DisabledBackgroundColor}"/>
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</Trigger>
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="Background" Value="{StaticResource FocusedBackgroundColor}" />
						</Trigger>
						<Trigger Property="IsDropDownOpen" Value="True" >
							<Setter Property="Background" Value="{StaticResource ItemSelectorBackgroundColor}" />
							<Setter TargetName="Toggle" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Toggle" Property="Visibility" Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<SolidColorBrush x:Key="ScrollBarDisabledBackground" Color="#F4F4F4"/>
	<Style x:Key="ScrollBarVerticalThumb" TargetType="{x:Type Thumb}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Background="Transparent" BorderThickness="0" BorderBrush="Transparent" Padding="2,0" >
						<Border BorderThickness="0" Background="{StaticResource DefaultBorderColor}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ScrollBarHorizontalThumb" TargetType="{x:Type Thumb}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Background="Transparent" BorderThickness="0" BorderBrush="Transparent" Padding="0,2" >
						<Border BorderThickness="0" Background="{StaticResource DefaultBorderColor}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Rectangle Fill="Transparent" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="HorizontalScrollBarTemplate" TargetType="{x:Type ScrollBar}">
		<Grid x:Name="Bg" UseLayoutRounding="true" Background="{TemplateBinding Background}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="0.00001*"/>
			</Grid.ColumnDefinitions>
			<Border BorderBrush="{StaticResource DefaultBorderColor}"  BorderThickness="0,1,0,0" Padding="0" Margin="0">
				<Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}">
					<Track.DecreaseRepeatButton>
						<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="{x:Static ScrollBar.PageLeftCommand}"/>
					</Track.DecreaseRepeatButton>
					<Track.IncreaseRepeatButton>
						<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="{x:Static ScrollBar.PageRightCommand}"/>
					</Track.IncreaseRepeatButton>
					<Track.Thumb>
						<Thumb Style="{StaticResource ScrollBarHorizontalThumb}"/>
					</Track.Thumb>
				</Track>
			</Border>
		</Grid>
	</ControlTemplate>
	<ControlTemplate x:Key="VerticalScrollBarTemplate" TargetType="{x:Type ScrollBar}">
		<Grid x:Name="Bg" UseLayoutRounding="true" Background="{TemplateBinding Background}">
			<Grid.RowDefinitions>
				<RowDefinition Height="0.00001*"/>
			</Grid.RowDefinitions>
			<Border BorderBrush="{StaticResource DefaultBorderColor}"  BorderThickness="0" Padding="0" Margin="0">
				<Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}" IsDirectionReversed="true">
					<Track.DecreaseRepeatButton>
						<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="{x:Static ScrollBar.PageUpCommand}"/>
					</Track.DecreaseRepeatButton>
					<Track.IncreaseRepeatButton>
						<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="{x:Static ScrollBar.PageDownCommand}"/>
					</Track.IncreaseRepeatButton>
					<Track.Thumb>
						<Thumb Style="{StaticResource ScrollBarVerticalThumb}"/>
					</Track.Thumb>
				</Track>
			</Border>
		</Grid>
	</ControlTemplate>
	<Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="Height" Value="Auto"/>
				<Setter Property="MinHeight" Value="0"/>
				<Setter Property="Width" Value="15"/>
				<Setter Property="MinWidth" Value="15"/>
				<Setter Property="Template" Value="{StaticResource VerticalScrollBarTemplate}" />
			</Trigger>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="Width" Value="Auto"/>
				<Setter Property="MinWidth" Value="0"/>
				<Setter Property="Height" Value="15"/>
				<Setter Property="MinHeight" Value="15"/>
				<Setter Property="Template" Value="{StaticResource HorizontalScrollBarTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="{x:Type TabControl}" TargetType="{x:Type TabControl}">
		<Setter Property="Padding" Value="0"/>
		<Setter Property="BorderThickness" Value="0,1,0,0"/>
		<Setter Property="BorderBrush" Value="{StaticResource WindowBorderColor}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}"/>
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabControl}">
					<Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
						<Grid.ColumnDefinitions>
							<ColumnDefinition x:Name="ColumnDefinition0"/>
							<ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition x:Name="RowDefinition0" Height="Auto"/>
							<RowDefinition x:Name="RowDefinition1" Height="*"/>
						</Grid.RowDefinitions>
						<TabPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="true" Margin="0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" />
						<Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
							<ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}"/>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="TabStripPlacement" Value="Bottom">
							<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
							<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
							<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
							<Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
							<Setter Property="Margin" TargetName="HeaderPanel" Value="5,0"/>
							<Setter Property="BorderThickness" Value="0,0,0,1"/>
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Left">
							<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
							<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
							<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
							<Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
							<Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
							<Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
							<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
							<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
							<Setter Property="Margin" TargetName="HeaderPanel" Value="0,5"/>
							<Setter Property="BorderThickness" Value="1,0,0,0"/>
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Right">
							<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
							<Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
							<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
							<Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
							<Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
							<Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
							<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
							<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
							<Setter Property="Margin" TargetName="HeaderPanel" Value="0,5"/>
							<Setter Property="BorderThickness" Value="0,0,1,0"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type TabItem}" TargetType="{x:Type TabItem}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="Background" Value="{StaticResource WindowBorderColor}"/>
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}"/>
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="MinWidth" Value="100"/>
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="Padding" Value="10,5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid SnapsToDevicePixels="true">
						<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
							<ContentPresenter x:Name="Content" ContentSource="Header" HorizontalAlignment="Center" RecognizesAccessKey="True" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="False">
							<Setter Property="Background" Value="Transparent"/>
						</Trigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="Panel.ZIndex" Value="1"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="false"/>
								<Condition Property="IsMouseOver" Value="true"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{StaticResource DefaultSelectionColor}"/>
						</MultiTrigger>
						<Trigger Property="TabStripPlacement" Value="Bottom">
							<Setter Property="BorderThickness" TargetName="Bd" Value="1,0"/>
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Left">
							<Setter Property="BorderThickness" TargetName="Bd" Value="0,1"/>
							<Setter Property="Padding" Value="15,10,5,10"/>
							<Setter TargetName="Content" Property="HorizontalAlignment" Value="Left"/>
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Right">
							<Setter Property="BorderThickness" TargetName="Bd" Value="0,1"/>
							<Setter Property="Padding" Value="15,10,5,10"/>
							<Setter TargetName="Content" Property="HorizontalAlignment" Value="Left"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="TabStripPlacement" Value="Top"/>
							</MultiTrigger.Conditions>
							<Setter Property="Margin" Value="0,0,0,-1"/>
							<Setter Property="Margin" TargetName="Content" Value="0,0,0,1"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="TabStripPlacement" Value="Bottom"/>
							</MultiTrigger.Conditions>
							<Setter Property="Margin" Value="0,-1,0,0"/>
							<Setter Property="Margin" TargetName="Content" Value="0,1,0,0"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="TabStripPlacement" Value="Left"/>
							</MultiTrigger.Conditions>
							<Setter Property="Margin" Value="0,0,-1,0"/>
							<Setter Property="Margin" TargetName="Content" Value="0,0,1,0"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="TabStripPlacement" Value="Right"/>
							</MultiTrigger.Conditions>
							<Setter Property="Margin" Value="-1,0,0,0"/>
							<Setter Property="Margin" TargetName="Content" Value="1,0,0,0"/>
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{StaticResource DisabledBackgroundColor}"/>
							<Setter Property="Foreground" Value="{StaticResource DisabledFontColor}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ListViewItemContainerStyle" TargetType="{x:Type ListViewItem}">
		<Setter Property="Margin" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType='{x:Type ListViewItem}'>
					<Border Name="BG" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" CornerRadius="0" Padding="0,3">
						<GridViewRowPresenter Content="{TemplateBinding Content}" Columns="{TemplateBinding GridView.ColumnCollection}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="BG" Property="Background" Value="{StaticResource MouseOverBackgroundColor}" />
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="BG" Property="Background" Value="{StaticResource DefaultSelectionColor}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ListViewHeaderContainerStyle" TargetType="{x:Type GridViewColumnHeader}">
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="TextElement.FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="TextElement.FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="Margin" Value="0" />
		<Setter Property="Padding" Value="3,2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType='{x:Type GridViewColumnHeader}'>
					<ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ListViewStyle" TargetType="{x:Type ListView}">
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource ListViewItemContainerStyle}" />
	</Style>

	<!-- ListBox -->
	<Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
		<Setter Property="Background" Value="{StaticResource ButtonBackgroundColor}" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
						<ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!-- ListBox -->


</ResourceDictionary>