using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WCFArchitect.Projects;
using WCFArchitect.Compiler.Generators;

namespace WCFArchitect.Compiler
{
	public class Generator
	{
		public Project Project { get; private set; }
		public ProjectGenerationFramework Framework { get; private set; }
		public string OutputDirectory { get; private set; }
		public bool Server { get; private set; }

		public Generator(Project Project, ProjectGenerationFramework Framework, string OutputDirectory, bool Server = true)
		{
			this.Project = Project;
			this.Framework = Framework;
			this.OutputDirectory = OutputDirectory;
			this.Server = Server;
		}

		public void Verify()
		{
			if (string.IsNullOrEmpty(Project.ServerOutputFile))
				Program.AddMessage(new CompileMessage("GS0003", "The '" + Project.Name + "' project does not have a Server Assembly Name. You must specify a Server Assembly Name.", CompileMessageSeverity.ERROR, null, Project, Project.GetType(), Guid.Empty, Project.ID));
			else
				if (Helpers.RegExs.MatchFileName.IsMatch(Project.ServerOutputFile) == false)
					Program.AddMessage(new CompileMessage("GS0004", "The Server Assembly Name in '" + Project.Name + "' project is not set or contains invalid characters. You must specify a valid Windows file name.", CompileMessageSeverity.ERROR, null, Project, Project.GetType(), Guid.Empty, Project.ID));
			if (string.IsNullOrEmpty(Project.ClientOutputFile))
				Program.AddMessage(new CompileMessage("GS0005", "The '" + Project.Name + "' project does not have a Client Assembly Name. You must specify a Client Assembly Name.", CompileMessageSeverity.ERROR, null, Project, Project.GetType(), Guid.Empty, Project.ID));
			else
				if (Helpers.RegExs.MatchFileName.IsMatch(Project.ClientOutputFile) == false)
					Program.AddMessage(new CompileMessage("GS0006", "The Client Assembly Name in '" + Project.Name + "' project is not set or contains invalid characters. You must specify a valid Windows file name.", CompileMessageSeverity.ERROR, null, Project, Project.GetType(), Guid.Empty, Project.ID));
			if ((Project.ServerOutputFile == Project.ClientOutputFile))
				Program.AddMessage(new CompileMessage("GS0007", "The '" + Project.Name + "' project Client and Server Assembly Names are the same. You must specify a different Server or Client Assembly Name.", CompileMessageSeverity.ERROR, null, Project, Project.GetType(), Guid.Empty, Project.ID));
		}

		public void Generate()
		{
			Globals.CurrentGenerationTarget = Framework;

			var code = new StringBuilder();
			code.AppendLine("//---------------------------------------------------------------------------");
			code.AppendLine("// This code was generated by a tool. Changes to this file may cause ");
			code.AppendLine("// incorrect behavior and will be lost if the code is regenerated.");
			code.AppendLine("//");
			code.AppendFormat("// WCF Architect Version:\t{0}{1}", Globals.ApplicationVersion, Environment.NewLine);
			if (Framework == ProjectGenerationFramework.NET30) code.AppendLine("// .NET Framework Version:\t3.0");
			if (Framework == ProjectGenerationFramework.NET35) code.AppendLine("// .NET Framework Version:\t3.5");
			if (Framework == ProjectGenerationFramework.NET35Client) code.AppendLine("// .NET Framework Version:\t3.5 (Client)");
			if (Framework == ProjectGenerationFramework.NET40) code.AppendLine("// .NET Framework Version:\t4.0");
			if (Framework == ProjectGenerationFramework.NET40Client) code.AppendLine("// .NET Framework Version:\t4.0 (Client)");
			if (Framework == ProjectGenerationFramework.NET45) code.AppendLine("// .NET Framework Version:\t4.5");
			if (Framework == ProjectGenerationFramework.SL40) code.AppendLine("// Silverlight Version:\t4.0");
			if (Framework == ProjectGenerationFramework.SL50) code.AppendLine("// Silverlight Version:\t5.0");
			if (Framework == ProjectGenerationFramework.WIN8) code.AppendLine("// .NET Framework Version:\t4.5 (Windows Runtime)");
			code.AppendLine("//---------------------------------------------------------------------------");
			code.AppendLine();

			// Generate using namespaces
			foreach (ProjectUsingNamespace pun in GetUsingNamespaces(Project))
			{
				if (pun.Server && Server)
				{
					if (pun.NET && (Framework == ProjectGenerationFramework.NET30 || Framework == ProjectGenerationFramework.NET35 || Framework == ProjectGenerationFramework.NET40 || Framework == ProjectGenerationFramework.NET45))
						code.AppendFormat("using {0};{1}", pun.Namespace, Environment.NewLine);
					else if (pun.NET && (Framework == ProjectGenerationFramework.NET35Client || Framework == ProjectGenerationFramework.NET40Client))
						if (!pun.IsFullFrameworkOnly) code.AppendFormat("using {0};{1}", pun.Namespace, Environment.NewLine);
				}
				if (pun.Client && !Server)
				{
					if (pun.NET && (Framework == ProjectGenerationFramework.NET30 || Framework == ProjectGenerationFramework.NET35 || Framework == ProjectGenerationFramework.NET40 || Framework == ProjectGenerationFramework.NET45))
						code.AppendFormat("using {0};{1}", pun.Namespace, Environment.NewLine);
					else if (pun.NET && (Framework == ProjectGenerationFramework.NET35Client || Framework == ProjectGenerationFramework.NET40Client))
					{
						if (!pun.IsFullFrameworkOnly)
							code.AppendFormat("using {0};{1}", pun.Namespace, Environment.NewLine);
					}
					if (pun.SL && (Framework == ProjectGenerationFramework.SL40 || Framework == ProjectGenerationFramework.SL50))
						code.AppendFormat("using {0};{1}", pun.Namespace, Environment.NewLine);
					else if (pun.RT && Framework == ProjectGenerationFramework.WIN8)
						code.AppendFormat("using {0};{1}", pun.Namespace, Environment.NewLine);
				}
			}
			code.AppendLine();

			if (Server)
			{
				if (Framework == ProjectGenerationFramework.NET30) code.AppendLine(NamespaceCSGenerator.GenerateServerCode30(Project.Namespace));
				if (Framework == ProjectGenerationFramework.NET35) code.AppendLine(NamespaceCSGenerator.GenerateServerCode35(Project.Namespace));
				if (Framework == ProjectGenerationFramework.NET35Client) code.AppendLine(NamespaceCSGenerator.GenerateServerCode35Client(Project.Namespace));
				if (Framework == ProjectGenerationFramework.NET40) code.AppendLine(NamespaceCSGenerator.GenerateServerCode40(Project.Namespace));
				if (Framework == ProjectGenerationFramework.NET40Client) code.AppendLine(NamespaceCSGenerator.GenerateServerCode40Client(Project.Namespace));
				if (Framework == ProjectGenerationFramework.NET45) code.AppendLine(NamespaceCSGenerator.GenerateServerCode45(Project.Namespace));
			}
			else
			{
				if (Framework == ProjectGenerationFramework.NET30) code.AppendLine(NamespaceCSGenerator.GenerateClientCode30(Project.Namespace));
				if (Framework == ProjectGenerationFramework.NET35) code.AppendLine(NamespaceCSGenerator.GenerateClientCode35(Project.Namespace));
				if (Framework == ProjectGenerationFramework.NET35Client) code.AppendLine(NamespaceCSGenerator.GenerateClientCode35Client(Project.Namespace));
				if (Framework == ProjectGenerationFramework.NET40) code.AppendLine(NamespaceCSGenerator.GenerateClientCode40(Project.Namespace));
				if (Framework == ProjectGenerationFramework.NET40Client) code.AppendLine(NamespaceCSGenerator.GenerateClientCode40Client(Project.Namespace));
				if (Framework == ProjectGenerationFramework.NET45 || Framework == ProjectGenerationFramework.WIN8) code.AppendLine(NamespaceCSGenerator.GenerateClientCode45(Project.Namespace));
			}
			code.AppendLine();

			System.IO.File.WriteAllText(new Uri(new Uri(Project.AbsolutePath), OutputDirectory).AbsolutePath, code.ToString());
		}

		private IEnumerable<ProjectUsingNamespace> GetUsingNamespaces(Project CurProject)
		{
			var puns = new List<ProjectUsingNamespace>(CurProject.UsingNamespaces);

			foreach (DependencyProject dp in CurProject.DependencyProjects)
				puns.AddRange(dp.Project.UsingNamespaces);

			return new List<ProjectUsingNamespace>(puns.Distinct(new UsingNamespaceComparer()));
		}
	}

	public class UsingNamespaceComparer : IEqualityComparer<ProjectUsingNamespace>
	{
		public bool Equals(ProjectUsingNamespace x, ProjectUsingNamespace y)
		{
			if (x.Namespace == y.Namespace) return true;
			return false;
		}

		public int GetHashCode(ProjectUsingNamespace obj)
		{
			return obj.GetHashCode();
		}
	}
}