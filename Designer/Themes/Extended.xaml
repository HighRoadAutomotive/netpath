<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
	xmlns:pc="clr-namespace:Prospective.Controls;assembly=Prospective.Controls"
	xmlns:pcd="clr-namespace:Prospective.Controls.Dialogs;assembly=Prospective.Controls"
	xmlns:pce="clr-namespace:Prospective.Controls.Extensions;assembly=Prospective.Controls">

	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="pack://application:,,,/NETPath;component/Themes/Defaults.xaml"/>
		<ResourceDictionary Source="pack://application:,,,/NETPath;component/Themes/Standard.xaml"/>
	</ResourceDictionary.MergedDictionaries>

	<!-- Label -->

	<Style TargetType="{x:Type pc:Label}">
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Width" Value="120" />
		<Setter Property="Height" Value="28" />
		<Setter Property="Padding" Value="5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type pc:Label}">
					<Border x:Name="PART_Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding CornerRadius}">
						<AccessText x:Name="PART_TextBlock" Margin="0" LineStackingStrategy="BlockLineHeight" Foreground="{TemplateBinding Foreground}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Text="{TemplateBinding Text}" TextAlignment="{TemplateBinding TextAlignment}" TextDecorations="{TemplateBinding TextDecorations}" TextEffects="{TemplateBinding TextEffects}" TextTrimming="{TemplateBinding TextTrimming}" TextWrapping="{TemplateBinding TextWrapping}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Button -->

	<Style x:Key="{x:Type pc:Button}" TargetType="{x:Type pc:Button}" BasedOn="{StaticResource {x:Type Button}}">
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsFocused" Value="False"></Condition>
					<Condition Property="IsUrgent" Value="False"></Condition>
					<Condition Property="IsRequired" Value="True"></Condition>
				</MultiTrigger.Conditions>
				<MultiTrigger.Setters>
					<Setter Property="Foreground" Value="{StaticResource RequiredForegroundColor}" />
				</MultiTrigger.Setters>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsFocused" Value="False"></Condition>
					<Condition Property="IsRequired" Value="True"></Condition>
					<Condition Property="IsUrgent" Value="True"></Condition>
				</MultiTrigger.Conditions>
				<MultiTrigger.Setters>
					<Setter Property="Foreground" Value="{StaticResource RequiredForegroundColor}" />
				</MultiTrigger.Setters>
				<MultiTrigger.EnterActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetProperty="(Control.Opacity)" AccelerationRatio="0.9" From="1.0" To="0.5" AutoReverse="True" Duration="0:0:0.5" FillBehavior="Stop" RepeatBehavior="Forever" />
						</Storyboard>
					</BeginStoryboard>
				</MultiTrigger.EnterActions>
				<MultiTrigger.ExitActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetProperty="(Control.Opacity)" DecelerationRatio="0.9" From="1.0" To="1.0" Duration="0:0:0.5" FillBehavior="HoldEnd" />
						</Storyboard>
					</BeginStoryboard>
				</MultiTrigger.ExitActions>
			</MultiTrigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{StaticResource MouseOverBackgroundColor}" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<!-- Dialog Button -->
	<pce:ToUppercaseValueConverter x:Key="ToUppercaseValueConverter" />
	<Style x:Key="{x:Type pcd:DialogAction}" TargetType="{x:Type pcd:DialogAction}" >
		<Setter Property="Background" Value="{StaticResource DefaultBackgroundColor}" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontSize" Value="14pt" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="UseLayoutRounding" Value="true"/>
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Margin" Value="5" />
		<Setter Property="MinWidth" Value="100" />
		<Setter Property="Padding" Value="20,5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border x:Name="Border" CornerRadius="0" BorderThickness="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
						<Border x:Name="Overlay" Background="Transparent" Padding="{TemplateBinding Padding}">
							<ContentPresenter Content="{Binding Path=Content, Converter={StaticResource ToUppercaseValueConverter}}" Margin="2" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter TargetName="Overlay" Property="Background" Value="{StaticResource ButtonMouseOverColor}" />
						</Trigger>
						<Trigger Property="IsDefault" Value="true">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonDefaultColor}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Overlay" Property="Background" Value="{StaticResource ButtonMouseOverColor}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="Overlay" Property="Background" Value="{StaticResource ButtonPressedColor}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundColor}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- RadioButton -->

	<Style x:Key="{x:Type pc:RadioButton}" TargetType="{x:Type pc:RadioButton}" BasedOn="{StaticResource {x:Type RadioButton}}">
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsFocused" Value="False"></Condition>
					<Condition Property="IsRequired" Value="True"></Condition>
				</MultiTrigger.Conditions>
				<MultiTrigger.Setters>
					<Setter Property="Foreground" Value="{StaticResource RequiredForegroundColor}" />
				</MultiTrigger.Setters>
			</MultiTrigger>
		</Style.Triggers>
	</Style>


	<!-- CheckBox -->

	<Style x:Key="{x:Type pc:CheckBox}" TargetType="{x:Type pc:CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsFocused" Value="False"></Condition>
					<Condition Property="IsRequired" Value="True"></Condition>
				</MultiTrigger.Conditions>
				<MultiTrigger.Setters>
					<Setter Property="Foreground" Value="{StaticResource RequiredForegroundColor}" />
				</MultiTrigger.Setters>
			</MultiTrigger>
		</Style.Triggers>
	</Style>


	<!-- TextBox -->

	<Style x:Key="{x:Type pc:TextBox}" TargetType="{x:Type pc:TextBox}">
		<Setter Property="CaretBrush" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="SelectionBrush" Value="{StaticResource DefaultSelectionColor}" />
		<Setter Property="Background" Value="{StaticResource DefaultBackgroundColor}"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="LabelTextColor" Value="{StaticResource ReadOnlyFontColor}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type pc:TextBox}">
					<Border x:Name="PART_Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" >
						<Grid x:Name="LayoutGrid">
							<ScrollViewer Margin="1,2" x:Name="PART_ContentHost" UseLayoutRounding="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" />
							<Label x:Name="LabelText" Cursor="IBeam" VerticalAlignment="Center" Margin="2" Foreground="{TemplateBinding LabelTextColor}" Content="{TemplateBinding LabelText}" Padding="2,0,0,0" FontStyle="Italic" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsFocused" Value="False"></Condition>
								<Condition Property="IsUpdated" Value="False"></Condition>
								<Condition Property="IsInvalid" Value="False"></Condition>
								<Condition Property="IsRequired" Value="True"></Condition>
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter Property="Background" Value="{StaticResource RequiredBackgroundColor}" />
							</MultiTrigger.Setters>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsFocused" Value="False"></Condition>
								<Condition Property="IsInvalid" Value="False"></Condition>
								<Condition Property="IsUpdated" Value="True"></Condition>
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter Property="Background" Value="{StaticResource UpdatedBackgroundColor}" />
							</MultiTrigger.Setters>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsInvalid" Value="False"></Condition>
								<Condition Property="IsFocused" Value="True"></Condition>
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter Property="Background" Value="{StaticResource FocusedBackgroundColor}" />
							</MultiTrigger.Setters>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsInvalid" Value="True"></Condition>
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter Property="Background" Value="{StaticResource ErrorBackgroundColor}" />
							</MultiTrigger.Setters>
						</MultiTrigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="True">
							<Setter Property="Visibility" TargetName="LabelText" Value="Collapsed" />
						</Trigger>
						<Trigger Property="HasText" Value="True">
							<Setter Property="Visibility" TargetName="LabelText" Value="Collapsed" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{StaticResource MouseOverBackgroundColor}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" Value="{StaticResource DisabledBackgroundColor}" />
							<Setter Property="Visibility" TargetName="LabelText" Value="Collapsed" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="VerticalScrollBarVisibility" Value="Visible"></Condition>
								<Condition Property="AcceptsReturn" Value="True"></Condition>
								<Condition Property="TextWrapping" Value="Wrap"></Condition>
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter Property="HorizontalAlignment" TargetName="LabelText" Value="Center" />
								<Setter Property="VerticalContentAlignment" Value="Top" />
							</MultiTrigger.Setters>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="VerticalScrollBarVisibility" Value="Visible"></Condition>
								<Condition Property="AcceptsReturn" Value="True"></Condition>
								<Condition Property="TextWrapping" Value="WrapWithOverflow"></Condition>
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter Property="HorizontalAlignment" TargetName="LabelText" Value="Center" />
								<Setter Property="VerticalContentAlignment" Value="Top" />
							</MultiTrigger.Setters>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- ComboBox -->

	<Style x:Key="{x:Type pc:ComboBox}" TargetType="{x:Type pc:ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
		<Setter Property="LabelTextColor" Value="{StaticResource ReadOnlyFontColor}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type pc:ComboBox}">
					<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0"  >
						<Grid x:Name="LayoutGrid">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
							</Grid.ColumnDefinitions>
							<Popup PlacementTarget="{Binding ElementName=BG}" x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Margin="0" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
								<Border x:Name="DropDownBorder" Width="{TemplateBinding ActualWidth}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}" Padding="2" HorizontalAlignment="Stretch" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
									<ScrollViewer x:Name="DropDownScrollViewer" HorizontalAlignment="Stretch" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" Foreground="{TemplateBinding Foreground}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" >
										<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" UseLayoutRounding="{TemplateBinding UseLayoutRounding}"/>
									</ScrollViewer>
								</Border>
							</Popup>
							<ToggleButton Name="Toggle" Visibility="Hidden" BorderThickness="0" Background="Transparent" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding IsEnabled}" Style="{StaticResource ComboBoxToggleButton}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}"/>
							<ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							<Label x:Name="PART_LabelText" Margin="2" Grid.Column="0" VerticalAlignment="Center" Foreground="{TemplateBinding LabelTextColor}" Content="{TemplateBinding LabelText}" Padding="2,0,0,0" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" Visibility="Collapsed" IsHitTestVisible="False" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="HasValue" Value="True">
							<Setter Property="Visibility" TargetName="PART_LabelText" Value="Hidden" />
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</Trigger>
						<Trigger Property="IsDropDownOpen" Value="True" >
							<Setter Property="Background" Value="{StaticResource ItemSelectorBackgroundColor}" />
							<Setter TargetName="Toggle" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Toggle" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="Background" Value="{StaticResource FocusedBackgroundColor}" />
							<Setter TargetName="PART_LabelText" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="SelectedIndex" Value="-1">
							<Setter TargetName="PART_LabelText" Property="Visibility" Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsKeyboardFocusWithin" Value="False"></Condition>
					<Condition Property="IsRequired" Value="True"></Condition>
				</MultiTrigger.Conditions>
				<MultiTrigger.Setters>
					<Setter Property="Background" Value="{StaticResource RequiredBackgroundColor}" />
			</MultiTrigger.Setters>
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	
</ResourceDictionary>