//---------------------------------------------------------------------------
// This code was generated by a tool. Changes to this file may cause 
// incorrect behavior and will be lost if the code is regenerated.
//
// NETPath Version:	2.0.0.1324
// .NET Framework Version:	4.5
//---------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Net;
using System.Net.Security;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Description;
using System.Text;
using System.Windows;

[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://tempuri.org/WCFArchitect/SampleServer/BasicNET/", ClrNamespace="WCFArchitect.SampleServer.BasicNET")]

#pragma warning disable 1591
	/**************************************************************************
	*	Dependency Types
	**************************************************************************/

namespace WCFArchitect.SampleServer.BasicWinRT
{
	[System.CodeDom.Compiler.GeneratedCodeAttribute("NETPath .NET CSharp Generator - BETA", "2.0.0.1324")]
	[DataContract(Namespace = "http://tempuri.org/WCFArchitect/SampleServer/BasicWinRT/")]
	public enum Colors : long
	{
		[EnumMember()] Blue,
		[EnumMember()] Green,
		[EnumMember()] Red,
		[EnumMember()] Yellow,
		[EnumMember()] Orange,
		[EnumMember()] Gray,
		[EnumMember()] Teal,
		[EnumMember()] Black,
	}

}

namespace WCFArchitect.SampleServer.BasicWinRT
{
	[System.Diagnostics.DebuggerStepThroughAttribute]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("NETPath .NET CSharp Generator - BETA", "2.0.0.1324")]
	[ProtoBuf.ProtoContract(SkipConstructor = false, UseProtoMembersOnly = true)]
	[DataContract(Name = "Customer", Namespace = "http://tempuri.org/")]
	public partial class Customer : System.Runtime.Serialization.IExtensibleDataObject
	{
		//Automatic Data Update Support
		public WCFArchitect.SampleServer.BasicWinRT.CustomerXAML XAMLObject { get; private set; }

		//Automatic Data Update Support
		private readonly System.Threading.ReaderWriterLockSlim __autodatalock = new System.Threading.ReaderWriterLockSlim();
		private static readonly System.Collections.Concurrent.ConcurrentDictionary<Guid, WCFArchitect.SampleServer.BasicWinRT.Customer> __autodata;
		static Customer()
		{
			__autodata = new System.Collections.Concurrent.ConcurrentDictionary<Guid, WCFArchitect.SampleServer.BasicWinRT.Customer>();
		}
		[OnDeserialized]
		private void OnDeserialized(StreamingContext context)
		{
			__autodata.TryAdd(ID, this);
		}
		~Customer()
		{
			WCFArchitect.SampleServer.BasicWinRT.Customer t;
			__autodata.TryRemove(ID, out t);
		}

		public System.Runtime.Serialization.ExtensionDataObject ExtensionData { get; set; }

		//Constuctors
		public Customer()
		{
			XAMLObject = this;
		}
		public Customer(WCFArchitect.SampleServer.BasicWinRT.CustomerXAML Data)
		{
			XAMLObject = Data;
			ID = Data.ID;
			Name = Data.Name;
			AddressLine1 = Data.AddressLine1;
			AddressLine2 = Data.AddressLine2;
			City = Data.City;
			State = Data.State;
			ZipCode = Data.ZipCode;
			Color = Data.Color;
		}

		[DataMember] private bool IDChanged;
		private Guid IDField;
		[DataMember(Name = "ID")] public Guid ID { get { __autodatalock.EnterReadLock(); try { return IDField; } finally { __autodatalock.ExitReadLock(); } } set { __autodatalock.EnterWriteLock(); try { IDField = value; IDChanged = true; } finally { __autodatalock.ExitWriteLock(); } } }
		[DataMember] private bool NameChanged;
		private string NameField;
		[DataMember(Name = "Name")] public string Name { get { __autodatalock.EnterReadLock(); try { return NameField; } finally { __autodatalock.ExitReadLock(); } } set { __autodatalock.EnterWriteLock(); try { NameField = value; NameChanged = true; } finally { __autodatalock.ExitWriteLock(); } } }
		[DataMember] private bool AddressLine1Changed;
		private string AddressLine1Field;
		[DataMember(Name = "AddressLine1")] public string AddressLine1 { get { __autodatalock.EnterReadLock(); try { return AddressLine1Field; } finally { __autodatalock.ExitReadLock(); } } set { __autodatalock.EnterWriteLock(); try { AddressLine1Field = value; AddressLine1Changed = true; } finally { __autodatalock.ExitWriteLock(); } } }
		private string AddressLine2Field;
		[DataMember(Name = "AddressLine2")] public string AddressLine2 { get { return AddressLine2Field; } set { AddressLine2Field = value; } }
		private string CityField;
		[DataMember(Name = "City")] public string City { get { return CityField; } set { CityField = value; } }
		private string StateField;
		[ProtoBuf.ProtoMember(0, IsPacked = true, OverwriteList = true, AsReference = true, DynamicType = true)] [DataMember(Order = 5, Name = "State")] public string State { get { return StateField; } set { StateField = value; } }
		[ProtoBuf.ProtoMember(1)] [DataMember] private bool ZipCodeChanged;
		private int ZipCodeField;
		[ProtoBuf.ProtoMember(2, OverwriteList = true)] [DataMember(Order = 6, Name = "ZipCode")] public int ZipCode { get { __autodatalock.EnterReadLock(); try { return ZipCodeField; } finally { __autodatalock.ExitReadLock(); } } set { __autodatalock.EnterWriteLock(); try { ZipCodeField = value; ZipCodeChanged = true; } finally { __autodatalock.ExitWriteLock(); } } }
		private WCFArchitect.SampleServer.BasicWinRT.Colors ColorField;
		[ProtoBuf.ProtoMember(3, OverwriteList = true)] [DataMember(Order = 7, Name = "Color")] public WCFArchitect.SampleServer.BasicWinRT.Colors Color { get { return ColorField; } set { ColorField = value; } }
	}


	//XAML Integration Object for the Customer DTO
	[System.CodeDom.Compiler.GeneratedCodeAttribute("NETPath .NET CSharp Generator - BETA", "2.0.0.1324")]
	public partial class CustomerXAML : DependencyObjectEx
	{
		public Customer DataObject { get; private set; }

		//Properties
		public Guid ID { get { return (Guid)GetValueThreaded(IDProperty); } set { SetValueThreaded(IDProperty, value); } }
		public static readonly DependencyProperty IDProperty = DependencyProperty.Register("ID", typeof(Guid), typeof(CustomerXAML), new PropertyMetadata(IDChangedCallback));
		private static void IDChangedCallback(DependencyObject o, DependencyPropertyChangedEventArgs e)
		{
			var t = o as WCFArchitect.SampleServer.BasicWinRT.CustomerXAML;
			if (t == null) return;
			t.DataObject.ID = (Guid) e.NewValue;
		}
		public string Name { get { return (string)GetValueThreaded(NameProperty); } set { SetValueThreaded(NameProperty, value); } }
		public static readonly DependencyProperty NameProperty = DependencyProperty.Register("Name", typeof(string), typeof(CustomerXAML), new PropertyMetadata(NameChangedCallback));
		private static void NameChangedCallback(DependencyObject o, DependencyPropertyChangedEventArgs e)
		{
			var t = o as WCFArchitect.SampleServer.BasicWinRT.CustomerXAML;
			if (t == null) return;
			t.DataObject.Name = (string) e.NewValue;
		}
		public string AddressLine1 { get { return (string)GetValueThreaded(AddressLine1Property); } set { SetValueThreaded(AddressLine1Property, value); } }
		public static readonly DependencyProperty AddressLine1Property = DependencyProperty.Register("AddressLine1", typeof(string), typeof(CustomerXAML), new PropertyMetadata(AddressLine1ChangedCallback));
		private static void AddressLine1ChangedCallback(DependencyObject o, DependencyPropertyChangedEventArgs e)
		{
			var t = o as WCFArchitect.SampleServer.BasicWinRT.CustomerXAML;
			if (t == null) return;
			t.DataObject.AddressLine1 = (string) e.NewValue;
		}
		public string AddressLine2 { get { return (string)GetValueThreaded(AddressLine2Property); } set { SetValueThreaded(AddressLine2Property, value); } }
		public static readonly DependencyProperty AddressLine2Property = DependencyProperty.Register("AddressLine2", typeof(string), typeof(CustomerXAML));
		public string City { get { return (string)GetValueThreaded(CityProperty); } set { SetValueThreaded(CityProperty, value); } }
		public static readonly DependencyProperty CityProperty = DependencyProperty.Register("City", typeof(string), typeof(CustomerXAML));
		public string State { get { return (string)GetValueThreaded(StateProperty); } set { SetValueThreaded(StateProperty, value); } }
		public static readonly DependencyProperty StateProperty = DependencyProperty.Register("State", typeof(string), typeof(CustomerXAML));
		public int ZipCode { get { return (int)GetValueThreaded(ZipCodeProperty); } set { SetValueThreaded(ZipCodeProperty, value); } }
		public static readonly DependencyProperty ZipCodeProperty = DependencyProperty.Register("ZipCode", typeof(int), typeof(CustomerXAML), new PropertyMetadata(ZipCodeChangedCallback));
		private static void ZipCodeChangedCallback(DependencyObject o, DependencyPropertyChangedEventArgs e)
		{
			var t = o as WCFArchitect.SampleServer.BasicWinRT.CustomerXAML;
			if (t == null) return;
			t.DataObject.ZipCode = (int) e.NewValue;
		}
		public WCFArchitect.SampleServer.BasicWinRT.Colors Color { get { return (WCFArchitect.SampleServer.BasicWinRT.Colors)GetValueThreaded(ColorProperty); } set { SetValueThreaded(ColorProperty, value); } }
		public static readonly DependencyProperty ColorProperty = DependencyProperty.Register("Color", typeof(WCFArchitect.SampleServer.BasicWinRT.Colors), typeof(CustomerXAML));

		//Implicit Conversion
		public static implicit operator Customer(CustomerXAML Data)
		{
			if (Data == null) return null;
			Customer v = null;
			if (Application.Current.Dispatcher.CheckAccess()) v = ConvertFromXAMLObject(Data);
			else Application.Current.Dispatcher.Invoke(() => { v = ConvertFromXAMLObject(Data); }, System.Windows.Threading.DispatcherPriority.Normal);
			return v;
		}
		public static implicit operator CustomerXAML(Customer Data)
		{
			if (Data == null) return null;
			CustomerXAML v = null;
			if (Application.Current.Dispatcher.CheckAccess()) v = ConvertToXAMLObject(Data);
			else Application.Current.Dispatcher.Invoke(() => { v = ConvertToXAMLObject(Data); }, System.Windows.Threading.DispatcherPriority.Normal);
			return v;
		}

		//Constructors
		public CustomerXAML()
		{
		}

		public CustomerXAML(Customer Data)
		{
			ID = Data.ID;
			Name = Data.Name;
			AddressLine1 = Data.AddressLine1;
			AddressLine2 = Data.AddressLine2;
			City = Data.City;
			State = Data.State;
			ZipCode = Data.ZipCode;
			Color = Data.Color;
		}

		//XAML/DTO Conversion Functions
		public static Customer ConvertFromXAMLObject(CustomerXAML Data)
		{
			if (Data.DataObject != null) return Data.DataObject;
			return new Customer(Data);
		}

		public static CustomerXAML ConvertToXAMLObject(Customer Data)
		{
			if (Data.XAMLObject != null) return Data.XAMLObject;
			return new CustomerXAML(Data);
		}
	}

}

namespace WCFArchitect.SampleServer.BasicNET
{
	/**************************************************************************
	*	Service Contracts
	**************************************************************************/

	[System.CodeDom.Compiler.GeneratedCodeAttribute("NETPath .NET CSharp Generator - BETA", "2.0.0.1324")]
	public interface ITestNET
	{
		[OperationContract(Action = "http://tempuri.org/WCFArchitect/SampleServer/BasicNET/TestNET/RefTestAsync", ReplyAction = "http://tempuri.org/WCFArchitect/SampleServer/BasicNET/TestNET/RefTestAsyncResponse")]
		System.Threading.Tasks.Task<WCFArchitect.SampleServer.BasicWinRT.Customer> RefTestAsync();

	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("NETPath .NET CSharp Generator - BETA", "2.0.0.1324")]
	public interface ITestNETCallback
	{
		[OperationContract(Action = "http://tempuri.org/WCFArchitect/SampleServer/BasicNET/TestNET/RetTestCallbackAsync", ReplyAction = "http://tempuri.org/WCFArchitect/SampleServer/BasicNET/TestNET/RetTestCallbackAsyncResponse")]
		System.Threading.Tasks.Task<WCFArchitect.SampleServer.BasicWinRT.Customer> RetTestCallbackAsync();

	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("NETPath .NET CSharp Generator - BETA", "2.0.0.1324")]
	public interface ITestNETChannel : ITestNET, System.ServiceModel.IClientChannel
	{
	}

	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("NETPath .NET CSharp Generator - BETA", "2.0.0.1324")]
	public partial class TestNETProxy : System.ServiceModel.DuplexClientBase<ITestNET>, ITestNET
	{
		public TestNETProxy(string endpointConfigurationName, string remoteAddress) : base(endpointConfigurationName, remoteAddress)
		{
		}

		public TestNETProxy(System.ServiceModel.InstanceContext callbackInstance) : base(callbackInstance)
		{
		}

		public TestNETProxy(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : base(callbackInstance, endpointConfigurationName)
		{
		}

		public TestNETProxy(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : base(callbackInstance, endpointConfigurationName, remoteAddress)
		{
		}

		public TestNETProxy(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : base(callbackInstance, endpointConfigurationName, remoteAddress)
		{
		}

		public TestNETProxy(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : base(callbackInstance, binding, remoteAddress)
		{
		}

		public TestNETProxy(System.ServiceModel.Description.ServiceEndpoint endpoint) : base(endpoint)
		{
		}

		public TestNETProxy(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Description.ServiceEndpoint endpoint) : base(callbackInstance, endpoint)
		{
		}

		public System.Threading.Tasks.Task<WCFArchitect.SampleServer.BasicWinRT.Customer> RefTestAsync()
		{
			return base.Channel.RefTestAsync();
		}

	}


}

#pragma warning restore 1591
