//---------------------------------------------------------------------------
// This code was generated by a tool. Changes to this file may cause 
// incorrect behavior and will be lost if the code is regenerated.
//
// WCF Architect Version:	1.1.1100.0
// .NET Framework Version:	4.0 (Client)
//---------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Net;
using System.Net.Security;
using System.Text;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Description;
using System.Windows;

namespace WCFArchitect.Samples.HelloWCF
{
//Data Contracts

//Service Contracts
	public partial class UsersClient
	{
		public static Uri PipeEndpointURI { get { return new Uri("net.pipe://localhost/PipeEndpoint"); } }
		public static System.ServiceModel.EndpointAddress CreatePipeEndpointEndpoint()
		{
			return new System.ServiceModel.EndpointAddress(new Uri("net.pipe://localhost/PipeEndpoint"));
		}
		public static System.ServiceModel.EndpointAddress CreatePipeEndpointEndpoint(string Address)
		{
			return new System.ServiceModel.EndpointAddress(new Uri("net.pipe://" + Address + "/PipeEndpoint"));
		}
		public static System.ServiceModel.EndpointAddress CreatePipeEndpointEndpoint(int Port)
		{
			return new System.ServiceModel.EndpointAddress(new Uri("net.pipe://localhost/PipeEndpoint"));
		}
		public static System.ServiceModel.EndpointAddress CreatePipeEndpointEndpoint(string Address, int Port)
		{
			return new System.ServiceModel.EndpointAddress(new Uri("net.pipe://" + Address + "/PipeEndpoint"));
		}
		public static System.ServiceModel.EndpointAddress CreatePipeEndpointEndpoint(System.ServiceModel.EndpointIdentity Identity)
		{
			return new System.ServiceModel.EndpointAddress(new Uri("net.pipe://localhost/PipeEndpoint"), Identity);
		}
		public static System.ServiceModel.EndpointAddress CreatePipeEndpointEndpoint(string Address, System.ServiceModel.EndpointIdentity Identity)
		{
			return new System.ServiceModel.EndpointAddress(new Uri("net.pipe://" + Address + "/PipeEndpoint"), Identity);
		}
		public static System.ServiceModel.EndpointAddress CreatePipeEndpointEndpoint(int Port, System.ServiceModel.EndpointIdentity Identity)
		{
			return new System.ServiceModel.EndpointAddress(new Uri("net.pipe://localhost/PipeEndpoint"), Identity);
		}
		public static System.ServiceModel.EndpointAddress CreatePipeEndpointEndpoint(string Address, int Port, System.ServiceModel.EndpointIdentity Identity)
		{
			return new System.ServiceModel.EndpointAddress(new Uri("net.pipe://" + Address + "/PipeEndpoint"), Identity);
		}

		public User UserInfo { get { return GetUserInfo(); } }
	}

}
//Client Services

//Client Service Bindings
namespace WCFArchitect.Samples.HelloWCF.Bindings
{
	public class NamedPipeBinding : NetNamedPipeBinding
	{
		public NamedPipeBinding()
		{
			SetDefaults();
		}
		public NamedPipeBinding(NetNamedPipeSecurity CustomSecurity)
		{
			SetDefaults();
			this.Security = CustomSecurity;
		}
		public NamedPipeBinding(System.Xml.XmlDictionaryReaderQuotas ReaderQuotas)
		{
			SetDefaults();
			this.ReaderQuotas = ReaderQuotas;
		}
		public NamedPipeBinding(NetNamedPipeSecurity CustomSecurity, System.Xml.XmlDictionaryReaderQuotas ReaderQuotas)
		{
			SetDefaults();
			this.Security = CustomSecurity;
			this.ReaderQuotas = ReaderQuotas;
		}
		private void SetDefaults()
		{
			this.CloseTimeout = new TimeSpan(600000000);
			this.Name = "Named Pipe Binding";
			this.Namespace = "http://tempuri.org";
			this.OpenTimeout = new TimeSpan(600000000);
			this.ReceiveTimeout = new TimeSpan(6000000000);
			this.SendTimeout = new TimeSpan(6000000000);
			this.HostNameComparisonMode = HostNameComparisonMode.StrongWildcard;
			this.MaxBufferPoolSize = 524288;
			this.MaxBufferSize = 65536;
			this.MaxConnections = 10;
			this.MaxReceivedMessageSize = 65536;
			this.TransactionFlow = true;
			this.TransactionProtocol = TransactionProtocol.Default;
			this.TransferMode = TransferMode.Buffered;
			this.Security = WCFArchitect.Samples.HelloWCF.Bindings.Security.CreateNamedPipeSecuritySecurity();
		}
	}
}
//Client Service Binding Security
namespace WCFArchitect.Samples.HelloWCF.Bindings
{
	public partial class Security
	{
		public static NetNamedPipeSecurity CreateNamedPipeSecuritySecurity()
		{
			NetNamedPipeSecurity sec = new NetNamedPipeSecurity();
			sec.Mode = NetNamedPipeSecurityMode.None;
			return sec;
		}
	}
}
