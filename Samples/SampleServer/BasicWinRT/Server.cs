//---------------------------------------------------------------------------
// This code was generated by a tool. Changes to this file may cause 
// incorrect behavior and will be lost if the code is regenerated.
//
// NETPath Version:	2.0.0.1364
// .NET Framework Version:	4.5
//---------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Net;
using System.Net.Security;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Description;
using System.Text;
using System.Collections.Concurrent;

#pragma warning disable 1591
namespace WCFArchitect.SampleServer.BasicWinRT
{
	/**************************************************************************
	*	Enumerations
	**************************************************************************/

	[System.CodeDom.Compiler.GeneratedCodeAttribute("NETPath .NET CSharp Generator - BETA", "2.0.0.1364")]
	[DataContract(Namespace = "http://tempuri.org/WCFArchitect/SampleServer/BasicWinRT/")]
	public enum Colors : long
	{
		[EnumMember()] Blue,
		[EnumMember()] Green,
		[EnumMember()] Red,
		[EnumMember()] Yellow,
		[EnumMember()] Orange,
		[EnumMember()] Gray,
		[EnumMember()] Teal,
		[EnumMember()] Black,
	}


	/**************************************************************************
	*	Data Contracts
	**************************************************************************/

	[System.CodeDom.Compiler.GeneratedCodeAttribute("NETPath .NET CSharp Generator - BETA", "2.0.0.1364")]
	[ProtoBuf.ProtoContract(SkipConstructor = false, UseProtoMembersOnly = true)]
	public partial class Customer
	{
		[DataMember] private bool IDChanged;
		[DataMember(Name = "ID")] public Guid ID { get; set; }
		[DataMember] private bool NameChanged;
		[DataMember(Name = "Name")] public string Name { get; set; }
		[DataMember(Name = "AddressLine1")] public string AddressLine1 { get; set; }
		[DataMember(Name = "AddressLine2")] public string AddressLine2 { get; set; }
		[DataMember] private bool CityChanged;
		[DataMember(Name = "City")] public string City { get; set; }
		[ProtoBuf.ProtoMember(1, IsPacked = true, OverwriteList = true, AsReference = true, DynamicType = true)] public string State { get; set; }
		[ProtoBuf.ProtoMember(2, OverwriteList = true)] public int ZipCode { get; set; }
		[ProtoBuf.ProtoMember(3, OverwriteList = true)] public WCFArchitect.SampleServer.BasicWinRT.Colors Color { get; set; }
		[ProtoBuf.ProtoMember(4, OverwriteList = true)] public Guid _DCMID { get; protected set; }
		[DataMember] private bool ListTestChanged;
		[DataMember(Name = "ListTest")] public List<WCFArchitect.SampleServer.BasicWinRT.Customer> ListTest { get; set; }
		[DataMember(Name = "ArrayTest")] public WCFArchitect.SampleServer.BasicWinRT.Customer[] ArrayTest { get; set; }
		[DataMember] private bool DictionaryTestChanged;
		[DataMember(Name = "DictionaryTest")] public System.Collections.Concurrent.ConcurrentDictionary<Guid, WCFArchitect.SampleServer.BasicWinRT.Customer> DictionaryTest { get; set; }
	}


	/**************************************************************************
	*	Service Contracts
	**************************************************************************/

	[System.CodeDom.Compiler.GeneratedCodeAttribute("NETPath .NET CSharp Generator - BETA", "2.0.0.1364")]
	[ServiceContract(CallbackContract = typeof(ICustomersCallback), SessionMode = System.ServiceModel.SessionMode.Required, Namespace = "http://tempuri.org/WCFArchitect/SampleServer/BasicWinRT/")]
	public interface ICustomers
	{
		///<param name='NewCustomer'></param>
		[OperationContract(ProtectionLevel = System.Net.Security.ProtectionLevel.None, IsInitiating = false, IsTerminating = false, IsOneWay = true)]
		System.Threading.Tasks.Task AddCustomerAsync(WCFArchitect.SampleServer.BasicWinRT.Customer NewCustomer);

		[OperationContract(ProtectionLevel = System.Net.Security.ProtectionLevel.None, IsInitiating = false, IsTerminating = false)]
		System.Threading.Tasks.Task<WCFArchitect.SampleServer.BasicWinRT.Customer> GetCustomerAsync();

		///<param name='Updated'></param>
		[OperationContract(ProtectionLevel = System.Net.Security.ProtectionLevel.None, IsInitiating = false, IsTerminating = false, IsOneWay = true)]
		System.Threading.Tasks.Task UpdateCustomerAsync(WCFArchitect.SampleServer.BasicWinRT.Customer Updated);

		///<param name='CustomerID'></param>
		[OperationContract(ProtectionLevel = System.Net.Security.ProtectionLevel.None, IsInitiating = false, IsTerminating = false)]
		bool DeleteCustomer(Guid CustomerID);

	}
	[System.CodeDom.Compiler.GeneratedCodeAttribute("NETPath .NET CSharp Generator - BETA", "2.0.0.1364")]
	public abstract class CustomersBase : ServerDuplexBase<CustomersBase, CustomersCallback, ICustomersCallback>, ICustomers
	{
		///<param name='NewCustomer'></param>
		public abstract System.Threading.Tasks.Task AddCustomerAsync(WCFArchitect.SampleServer.BasicWinRT.Customer NewCustomer);

		public abstract System.Threading.Tasks.Task<WCFArchitect.SampleServer.BasicWinRT.Customer> GetCustomerAsync();

		///<param name='Updated'></param>
		public abstract System.Threading.Tasks.Task UpdateCustomerAsync(WCFArchitect.SampleServer.BasicWinRT.Customer Updated);

		public abstract bool DeleteCustomer(Guid CustomerID);

	}
	[System.CodeDom.Compiler.GeneratedCodeAttribute("NETPath .NET CSharp Generator - BETA", "2.0.0.1364")]
	public interface ICustomersCallback
	{
		///<param name='Callback'>The function to call when the operation is complete.</param>
		///<param name='AsyncState'>An object representing the state of the operation.</param>
		[OperationContract(ProtectionLevel = System.Net.Security.ProtectionLevel.None, AsyncPattern = true, IsInitiating = false, IsTerminating = false)]
		IAsyncResult BeginAsyncCallbackTestInvoke( AsyncCallback Callback, object AsyncState);
		///<summary>Finalizes the asynchronous operation.</summary>
		///<returns>
		///
		///</returns>
		///<param name='result'>The result of the operation.</param>
		bool EndAsyncCallbackTestInvoke(IAsyncResult result);

	}
	[System.CodeDom.Compiler.GeneratedCodeAttribute("NETPath .NET CSharp Generator - BETA", "2.0.0.1364")]
	public partial class CustomersCallback : ServerCallbackBase<ICustomersCallback>, ICustomersCallback
	{
		public CustomersCallback()
		{
			onBeginAsyncCallbackTestDelegate = new BeginOperationDelegate(this.OnBeginAsyncCallbackTest);
			onEndAsyncCallbackTestDelegate = new EndOperationDelegate(this.OnEndAsyncCallbackTest);
			onAsyncCallbackTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAsyncCallbackTestCompleted);
		}

		public CustomersCallback(ICustomersCallback callback)
		{
			__callback = callback;
			onBeginAsyncCallbackTestDelegate = new BeginOperationDelegate(this.OnBeginAsyncCallbackTest);
			onEndAsyncCallbackTestDelegate = new EndOperationDelegate(this.OnEndAsyncCallbackTest);
			onAsyncCallbackTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAsyncCallbackTestCompleted);
		}

		private readonly BeginOperationDelegate onBeginAsyncCallbackTestDelegate;
		private readonly EndOperationDelegate onEndAsyncCallbackTestDelegate;
		private readonly System.Threading.SendOrPostCallback onAsyncCallbackTestCompletedDelegate;
		public Action<bool, System.Exception, bool, object> AsyncCallbackTestCompleted;
		///<param name='Callback'>The function to call when the operation is complete.</param>
		///<param name='AsyncState'>An object representing the state of the operation.</param>
		IAsyncResult ICustomersCallback.BeginAsyncCallbackTestInvoke(AsyncCallback Callback, object AsyncState)
		{
			return __callback.BeginAsyncCallbackTestInvoke(Callback, AsyncState);
		}
		///<summary>Finalizes the asynchronous operation.</summary>
		///<returns>
		///
		///</returns>
		///<param name='result'>The result of the operation.</param>
		bool ICustomersCallback.EndAsyncCallbackTestInvoke(IAsyncResult result)
		{
			return __callback.EndAsyncCallbackTestInvoke(result);
		}
		private IAsyncResult OnBeginAsyncCallbackTest(object[] Values, AsyncCallback Callback, object AsyncState)
		{
			return ((ICustomersCallback)this).BeginAsyncCallbackTestInvoke(Callback, AsyncState);
		}
		private object[] OnEndAsyncCallbackTest(IAsyncResult result)
		{
			return new object[] { ((ICustomersCallback)this).EndAsyncCallbackTestInvoke(result) };
		}
		private void OnAsyncCallbackTestCompleted(object state)
		{
			if (this.AsyncCallbackTestCompleted == null) return;
			InvokeAsyncCompletedEventArgs e = (InvokeAsyncCompletedEventArgs)state;
			this.AsyncCallbackTestCompleted((bool)e.Results[0], e.Error, e.Cancelled, e.UserState);
		}
		public void AsyncCallbackTestInvoke()
		{
			this.AsyncCallbackTestInvoke(null);
		}
		///<param name='userState'>Allows the user of this function to distinguish between different calls.</param>
		public void AsyncCallbackTestInvoke(object userState)
		{
			InvokeAsync(this.onBeginAsyncCallbackTestDelegate, new object[] {  }, this.onEndAsyncCallbackTestDelegate, this.onAsyncCallbackTestCompletedDelegate, userState);
		}

	}


	/**************************************************************************
	*	Service Bindings
	**************************************************************************/

	[System.CodeDom.Compiler.GeneratedCodeAttribute("NETPath .NET CSharp Generator - BETA", "2.0.0.1364")]
	public partial class CustomerNetHttpBinding : System.ServiceModel.NetHttpBinding
	{
		public CustomerNetHttpBinding()
		{
			SetDefaults();
		}
		public CustomerNetHttpBinding(System.ServiceModel.BasicHttpSecurity CustomSecurity)
		{
			SetDefaults();
			this.Security = CustomSecurity;
		}
		public CustomerNetHttpBinding(System.Xml.XmlDictionaryReaderQuotas ReaderQuotas)
		{
			SetDefaults();
			this.ReaderQuotas = ReaderQuotas;
		}
		public CustomerNetHttpBinding(System.ServiceModel.BasicHttpSecurity CustomSecurity, System.Xml.XmlDictionaryReaderQuotas ReaderQuotas)
		{
			SetDefaults();
			this.Security = CustomSecurity;
			this.ReaderQuotas = ReaderQuotas;
		}
		private void SetDefaults()
		{
			this.Name = "CustomerNetHttpBinding";
			this.Namespace = "http://tempuri.org";
			this.OpenTimeout = new TimeSpan(600000000);
			this.CloseTimeout = new TimeSpan(600000000);
			this.SendTimeout = new TimeSpan(600000000);
			this.ReceiveTimeout = new TimeSpan(6000000000);
			this.AllowCookies = false;
			this.MaxBufferPoolSize = 524288;
			this.MaxBufferSize = 65536;
			this.MaxReceivedMessageSize = 65536;
			this.MessageEncoding = NetHttpMessageEncoding.Text;
			this.TextEncoding = System.Text.Encoding.UTF8;
			this.TransferMode = TransferMode.Buffered;
			this.WebSocketSettings.DisablePayloadMasking = false;
			this.WebSocketSettings.KeepAliveInterval = new TimeSpan(6000000000);
			this.WebSocketSettings.SubProtocol = "";
			this.WebSocketSettings.TransportUsage = System.ServiceModel.Channels.WebSocketTransportUsage.WhenDuplex;
			this.HostNameComparisonMode = HostNameComparisonMode.StrongWildcard;
			this.WebSocketSettings.CreateNotificationOnConnection = false;
			this.WebSocketSettings.MaxPendingConnections = 32;
			this.ReliableSession.Enabled = true;
			this.ReliableSession.InactivityTimeout = new TimeSpan(6000000000);
			this.ReliableSession.Ordered = true;
			this.BypassProxyOnLocal = false;
			this.Security.Mode = BasicHttpSecurityMode.None;
			this.Security.Transport.ClientCredentialType = HttpClientCredentialType.None;
			this.Security.Transport.ProxyCredentialType = HttpProxyCredentialType.None;
			this.Security.Transport.Realm = "";
			this.Security.Message.AlgorithmSuite = System.ServiceModel.Security.SecurityAlgorithmSuite.Basic256;
			this.Security.Message.ClientCredentialType = BasicHttpMessageCredentialType.UserName;

		}
	}


	/**************************************************************************
	*	Service Hosts
	**************************************************************************/

	[System.CodeDom.Compiler.GeneratedCodeAttribute("NETPath .NET CSharp Generator - BETA", "2.0.0.1364")]
	public partial class CustomerHost : ServiceHost
	{
		public static Uri NetHttpEndpointURI { get { return new Uri("http://" + Environment.MachineName + "/NetHttpEndpoint"); } }
		public ServiceThrottlingBehavior NetHttpThrottlingBehavior { get; private set; }
		public CustomerHost(object singletonInstance) : base(singletonInstance)
		{
			this.Authorization.ImpersonateCallerForAllOperations = false;
			this.Authorization.PrincipalPermissionMode = System.ServiceModel.Description.PrincipalPermissionMode.None;
			this.CloseTimeout = new TimeSpan(600000000);
			this.OpenTimeout = new TimeSpan(600000000);
			this.Description.Name = "CustomerHost";
			this.Description.Namespace = "http://tempuri.org/";
			this.NetHttpThrottlingBehavior = new ServiceThrottlingBehavior();
			this.NetHttpThrottlingBehavior.MaxConcurrentCalls = 16;
			this.NetHttpThrottlingBehavior.MaxConcurrentInstances = 26;
			this.NetHttpThrottlingBehavior.MaxConcurrentSessions = 10;
			var NetHttpEndpointEndpoint = this.AddServiceEndpoint(typeof(WCFArchitect.SampleServer.BasicWinRT.ICustomers), new WCFArchitect.SampleServer.BasicWinRT.CustomerNetHttpBinding(), NetHttpEndpointURI);

		}
		public CustomerHost(Type serviceType) : base(serviceType)
		{
			this.Authorization.ImpersonateCallerForAllOperations = false;
			this.Authorization.PrincipalPermissionMode = System.ServiceModel.Description.PrincipalPermissionMode.None;
			this.CloseTimeout = new TimeSpan(600000000);
			this.OpenTimeout = new TimeSpan(600000000);
			this.Description.Name = "CustomerHost";
			this.Description.Namespace = "http://tempuri.org/";
			this.NetHttpThrottlingBehavior = new ServiceThrottlingBehavior();
			this.NetHttpThrottlingBehavior.MaxConcurrentCalls = 16;
			this.NetHttpThrottlingBehavior.MaxConcurrentInstances = 26;
			this.NetHttpThrottlingBehavior.MaxConcurrentSessions = 10;
			var NetHttpEndpointEndpoint = this.AddServiceEndpoint(typeof(WCFArchitect.SampleServer.BasicWinRT.ICustomers), new WCFArchitect.SampleServer.BasicWinRT.CustomerNetHttpBinding(), NetHttpEndpointURI);

		}
		public CustomerHost(object singletonInstance, params Uri[] BaseAddresses) : base(singletonInstance, BaseAddresses)
		{
			this.Authorization.ImpersonateCallerForAllOperations = false;
			this.Authorization.PrincipalPermissionMode = System.ServiceModel.Description.PrincipalPermissionMode.None;
			this.CloseTimeout = new TimeSpan(600000000);
			this.OpenTimeout = new TimeSpan(600000000);
			this.Description.Name = "CustomerHost";
			this.Description.Namespace = "http://tempuri.org/";
			this.NetHttpThrottlingBehavior = new ServiceThrottlingBehavior();
			this.NetHttpThrottlingBehavior.MaxConcurrentCalls = 16;
			this.NetHttpThrottlingBehavior.MaxConcurrentInstances = 26;
			this.NetHttpThrottlingBehavior.MaxConcurrentSessions = 10;
			var NetHttpEndpointEndpoint = this.AddServiceEndpoint(typeof(WCFArchitect.SampleServer.BasicWinRT.ICustomers), new WCFArchitect.SampleServer.BasicWinRT.CustomerNetHttpBinding(), NetHttpEndpointURI);

		}
		public CustomerHost(Type serviceType, params Uri[] BaseAddresses) : base(serviceType, BaseAddresses)
		{
			this.Authorization.ImpersonateCallerForAllOperations = false;
			this.Authorization.PrincipalPermissionMode = System.ServiceModel.Description.PrincipalPermissionMode.None;
			this.CloseTimeout = new TimeSpan(600000000);
			this.OpenTimeout = new TimeSpan(600000000);
			this.Description.Name = "CustomerHost";
			this.Description.Namespace = "http://tempuri.org/";
			this.NetHttpThrottlingBehavior = new ServiceThrottlingBehavior();
			this.NetHttpThrottlingBehavior.MaxConcurrentCalls = 16;
			this.NetHttpThrottlingBehavior.MaxConcurrentInstances = 26;
			this.NetHttpThrottlingBehavior.MaxConcurrentSessions = 10;
			var NetHttpEndpointEndpoint = this.AddServiceEndpoint(typeof(WCFArchitect.SampleServer.BasicWinRT.ICustomers), new WCFArchitect.SampleServer.BasicWinRT.CustomerNetHttpBinding(), NetHttpEndpointURI);

		}
		public CustomerHost(object singletonInstance, bool DisableDefaultEndpoints) : base(singletonInstance)
		{
			this.Authorization.ImpersonateCallerForAllOperations = false;
			this.Authorization.PrincipalPermissionMode = System.ServiceModel.Description.PrincipalPermissionMode.None;
			this.CloseTimeout = new TimeSpan(600000000);
			this.OpenTimeout = new TimeSpan(600000000);
			this.Description.Name = "CustomerHost";
			this.Description.Namespace = "http://tempuri.org/";
			this.NetHttpThrottlingBehavior = new ServiceThrottlingBehavior();
			this.NetHttpThrottlingBehavior.MaxConcurrentCalls = 16;
			this.NetHttpThrottlingBehavior.MaxConcurrentInstances = 26;
			this.NetHttpThrottlingBehavior.MaxConcurrentSessions = 10;
			if(DisableDefaultEndpoints == false)
			{
			var NetHttpEndpointEndpoint = this.AddServiceEndpoint(typeof(WCFArchitect.SampleServer.BasicWinRT.ICustomers), new WCFArchitect.SampleServer.BasicWinRT.CustomerNetHttpBinding(), NetHttpEndpointURI);

			}
		}
		public CustomerHost(Type serviceType, bool DisableDefaultEndpoints) : base(serviceType)
		{
			this.Authorization.ImpersonateCallerForAllOperations = false;
			this.Authorization.PrincipalPermissionMode = System.ServiceModel.Description.PrincipalPermissionMode.None;
			this.CloseTimeout = new TimeSpan(600000000);
			this.OpenTimeout = new TimeSpan(600000000);
			this.Description.Name = "CustomerHost";
			this.Description.Namespace = "http://tempuri.org/";
			this.NetHttpThrottlingBehavior = new ServiceThrottlingBehavior();
			this.NetHttpThrottlingBehavior.MaxConcurrentCalls = 16;
			this.NetHttpThrottlingBehavior.MaxConcurrentInstances = 26;
			this.NetHttpThrottlingBehavior.MaxConcurrentSessions = 10;
			if(DisableDefaultEndpoints == false)
			{
			var NetHttpEndpointEndpoint = this.AddServiceEndpoint(typeof(WCFArchitect.SampleServer.BasicWinRT.ICustomers), new WCFArchitect.SampleServer.BasicWinRT.CustomerNetHttpBinding(), NetHttpEndpointURI);

			}
		}
		public CustomerHost(object singletonInstance, bool DisableDefaultEndpoints, params Uri[] BaseAddresses) : base(singletonInstance, BaseAddresses)
		{
			this.Authorization.ImpersonateCallerForAllOperations = false;
			this.Authorization.PrincipalPermissionMode = System.ServiceModel.Description.PrincipalPermissionMode.None;
			this.CloseTimeout = new TimeSpan(600000000);
			this.OpenTimeout = new TimeSpan(600000000);
			this.Description.Name = "CustomerHost";
			this.Description.Namespace = "http://tempuri.org/";
			this.NetHttpThrottlingBehavior = new ServiceThrottlingBehavior();
			this.NetHttpThrottlingBehavior.MaxConcurrentCalls = 16;
			this.NetHttpThrottlingBehavior.MaxConcurrentInstances = 26;
			this.NetHttpThrottlingBehavior.MaxConcurrentSessions = 10;
			if(DisableDefaultEndpoints == false)
			{
			var NetHttpEndpointEndpoint = this.AddServiceEndpoint(typeof(WCFArchitect.SampleServer.BasicWinRT.ICustomers), new WCFArchitect.SampleServer.BasicWinRT.CustomerNetHttpBinding(), NetHttpEndpointURI);

			}
		}
		public CustomerHost(Type serviceType, bool DisableDefaultEndpoints, params Uri[] BaseAddresses) : base(serviceType, BaseAddresses)
		{
			this.Authorization.ImpersonateCallerForAllOperations = false;
			this.Authorization.PrincipalPermissionMode = System.ServiceModel.Description.PrincipalPermissionMode.None;
			this.CloseTimeout = new TimeSpan(600000000);
			this.OpenTimeout = new TimeSpan(600000000);
			this.Description.Name = "CustomerHost";
			this.Description.Namespace = "http://tempuri.org/";
			this.NetHttpThrottlingBehavior = new ServiceThrottlingBehavior();
			this.NetHttpThrottlingBehavior.MaxConcurrentCalls = 16;
			this.NetHttpThrottlingBehavior.MaxConcurrentInstances = 26;
			this.NetHttpThrottlingBehavior.MaxConcurrentSessions = 10;
			if(DisableDefaultEndpoints == false)
			{
			var NetHttpEndpointEndpoint = this.AddServiceEndpoint(typeof(WCFArchitect.SampleServer.BasicWinRT.ICustomers), new WCFArchitect.SampleServer.BasicWinRT.CustomerNetHttpBinding(), NetHttpEndpointURI);

			}
		}
	}


}

#pragma warning restore 1591
